<?php
/**
 * WechatAdvertiserLocalBusinessApi
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TencentAds\ApiException;
use TencentAds\Configuration;
use TencentAds\HeaderSelector;
use TencentAds\ObjectSerializer;

/**
 * WechatAdvertiserLocalBusinessApi Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WechatAdvertiserLocalBusinessApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation wechatAdvertiserLocalBusinessAdd
     *
     * 附近推商家开户
     *
     * @param  \SplFileObject $headImage headImage (required)
     * @param  string $name name (required)
     * @param  string $description description (required)
     * @param  string $contactPerson contactPerson (required)
     * @param  string $contactPersonMobile contactPersonMobile (required)
     * @param  string $contactPersonCardId contactPersonCardId (required)
     * @param  string $corporation corporation (required)
     * @param  string $corporationLicence corporationLicence (required)
     * @param  int $industryId industryId (required)
     * @param  string $businessId businessId (required)
     * @param  string $contactPersonTele contactPersonTele (optional)
     * @param  string $businessContent businessContent (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TencentAds\Model\WechatAdvertiserLocalBusinessAddResponse
     */
    public function wechatAdvertiserLocalBusinessAdd($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele = null, $businessContent = null)
    {
        list($response) = $this->wechatAdvertiserLocalBusinessAddWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele, $businessContent);
        return $response;
    }

    /**
     * Operation wechatAdvertiserLocalBusinessAddWithHttpInfo
     *
     * 附近推商家开户
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  string $businessId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TencentAds\Model\WechatAdvertiserLocalBusinessAddResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function wechatAdvertiserLocalBusinessAddWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele = null, $businessContent = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessAddResponse';
        $request = $this->wechatAdvertiserLocalBusinessAddRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele, $businessContent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TencentAds\Model\WechatAdvertiserLocalBusinessAddResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wechatAdvertiserLocalBusinessAddAsync
     *
     * 附近推商家开户
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  string $businessId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessAddAsync($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele = null, $businessContent = null)
    {
        return $this->wechatAdvertiserLocalBusinessAddAsyncWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele, $businessContent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wechatAdvertiserLocalBusinessAddAsyncWithHttpInfo
     *
     * 附近推商家开户
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  string $businessId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessAddAsyncWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele = null, $businessContent = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessAddResponse';
        $request = $this->wechatAdvertiserLocalBusinessAddRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele, $businessContent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wechatAdvertiserLocalBusinessAdd'
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  string $businessId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wechatAdvertiserLocalBusinessAddRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $businessId, $contactPersonTele = null, $businessContent = null)
    {
        // verify the required parameter 'headImage' is set
        if ($headImage === null || (is_array($headImage) && count($headImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headImage when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'contactPerson' is set
        if ($contactPerson === null || (is_array($contactPerson) && count($contactPerson) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPerson when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'contactPersonMobile' is set
        if ($contactPersonMobile === null || (is_array($contactPersonMobile) && count($contactPersonMobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPersonMobile when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'contactPersonCardId' is set
        if ($contactPersonCardId === null || (is_array($contactPersonCardId) && count($contactPersonCardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPersonCardId when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'corporation' is set
        if ($corporation === null || (is_array($corporation) && count($corporation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'corporationLicence' is set
        if ($corporationLicence === null || (is_array($corporationLicence) && count($corporationLicence) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporationLicence when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'industryId' is set
        if ($industryId === null || (is_array($industryId) && count($industryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $industryId when calling wechatAdvertiserLocalBusinessAdd'
            );
        }
        // verify the required parameter 'businessId' is set
        if ($businessId === null || (is_array($businessId) && count($businessId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $businessId when calling wechatAdvertiserLocalBusinessAdd'
            );
        }

        $resourcePath = '/wechat_advertiser_local_business/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($headImage !== null) {
            $multipart = true;
            $formParams['head_image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($headImage), 'rb');
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($contactPerson !== null) {
            $formParams['contact_person'] = ObjectSerializer::toFormValue($contactPerson);
        }
        // form params
        if ($contactPersonMobile !== null) {
            $formParams['contact_person_mobile'] = ObjectSerializer::toFormValue($contactPersonMobile);
        }
        // form params
        if ($contactPersonCardId !== null) {
            $formParams['contact_person_card_id'] = ObjectSerializer::toFormValue($contactPersonCardId);
        }
        // form params
        if ($contactPersonTele !== null) {
            $formParams['contact_person_tele'] = ObjectSerializer::toFormValue($contactPersonTele);
        }
        // form params
        if ($corporation !== null) {
            $formParams['corporation'] = ObjectSerializer::toFormValue($corporation);
        }
        // form params
        if ($corporationLicence !== null) {
            $formParams['corporation_licence'] = ObjectSerializer::toFormValue($corporationLicence);
        }
        // form params
        if ($businessContent !== null) {
            $formParams['business_content'] = ObjectSerializer::toFormValue($businessContent);
        }
        // form params
        if ($industryId !== null) {
            $formParams['industry_id'] = ObjectSerializer::toFormValue($industryId);
        }
        // form params
        if ($businessId !== null) {
            $formParams['business_id'] = ObjectSerializer::toFormValue($businessId);
        }
        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['multipart/form-data'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('nonce');
        if ($apiKey !== null) {
            $queryParams['nonce'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wechatAdvertiserLocalBusinessGet
     *
     * 查询附近推商家信息
     *
     * @param  int $accountId accountId (required)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TencentAds\Model\WechatAdvertiserLocalBusinessGetResponse
     */
    public function wechatAdvertiserLocalBusinessGet($accountId, $fields = null)
    {
        list($response) = $this->wechatAdvertiserLocalBusinessGetWithHttpInfo($accountId, $fields);
        return $response;
    }

    /**
     * Operation wechatAdvertiserLocalBusinessGetWithHttpInfo
     *
     * 查询附近推商家信息
     *
     * @param  int $accountId (required)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TencentAds\Model\WechatAdvertiserLocalBusinessGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function wechatAdvertiserLocalBusinessGetWithHttpInfo($accountId, $fields = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessGetResponse';
        $request = $this->wechatAdvertiserLocalBusinessGetRequest($accountId, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TencentAds\Model\WechatAdvertiserLocalBusinessGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wechatAdvertiserLocalBusinessGetAsync
     *
     * 查询附近推商家信息
     *
     * @param  int $accountId (required)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessGetAsync($accountId, $fields = null)
    {
        return $this->wechatAdvertiserLocalBusinessGetAsyncWithHttpInfo($accountId, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wechatAdvertiserLocalBusinessGetAsyncWithHttpInfo
     *
     * 查询附近推商家信息
     *
     * @param  int $accountId (required)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessGetAsyncWithHttpInfo($accountId, $fields = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessGetResponse';
        $request = $this->wechatAdvertiserLocalBusinessGetRequest($accountId, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wechatAdvertiserLocalBusinessGet'
     *
     * @param  int $accountId (required)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wechatAdvertiserLocalBusinessGetRequest($accountId, $fields = null)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling wechatAdvertiserLocalBusinessGet'
            );
        }

        $resourcePath = '/wechat_advertiser_local_business/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accountId !== null) {
            $queryParams['account_id'] = ObjectSerializer::toQueryValue($accountId);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['text/plain'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('nonce');
        if ($apiKey !== null) {
            $queryParams['nonce'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation wechatAdvertiserLocalBusinessUpdate
     *
     * 更新附近推商家信息
     *
     * @param  \SplFileObject $headImage headImage (required)
     * @param  string $name name (required)
     * @param  string $description description (required)
     * @param  string $contactPerson contactPerson (required)
     * @param  string $contactPersonMobile contactPersonMobile (required)
     * @param  string $contactPersonCardId contactPersonCardId (required)
     * @param  string $corporation corporation (required)
     * @param  string $corporationLicence corporationLicence (required)
     * @param  int $industryId industryId (required)
     * @param  int $accountId accountId (required)
     * @param  string $contactPersonTele contactPersonTele (optional)
     * @param  string $businessContent businessContent (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TencentAds\Model\WechatAdvertiserLocalBusinessUpdateResponse
     */
    public function wechatAdvertiserLocalBusinessUpdate($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele = null, $businessContent = null)
    {
        list($response) = $this->wechatAdvertiserLocalBusinessUpdateWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele, $businessContent);
        return $response;
    }

    /**
     * Operation wechatAdvertiserLocalBusinessUpdateWithHttpInfo
     *
     * 更新附近推商家信息
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  int $accountId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TencentAds\Model\WechatAdvertiserLocalBusinessUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function wechatAdvertiserLocalBusinessUpdateWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele = null, $businessContent = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessUpdateResponse';
        $request = $this->wechatAdvertiserLocalBusinessUpdateRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele, $businessContent);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TencentAds\Model\WechatAdvertiserLocalBusinessUpdateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation wechatAdvertiserLocalBusinessUpdateAsync
     *
     * 更新附近推商家信息
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  int $accountId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessUpdateAsync($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele = null, $businessContent = null)
    {
        return $this->wechatAdvertiserLocalBusinessUpdateAsyncWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele, $businessContent)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation wechatAdvertiserLocalBusinessUpdateAsyncWithHttpInfo
     *
     * 更新附近推商家信息
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  int $accountId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function wechatAdvertiserLocalBusinessUpdateAsyncWithHttpInfo($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele = null, $businessContent = null)
    {
        $returnType = '\TencentAds\Model\WechatAdvertiserLocalBusinessUpdateResponse';
        $request = $this->wechatAdvertiserLocalBusinessUpdateRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele, $businessContent);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'wechatAdvertiserLocalBusinessUpdate'
     *
     * @param  \SplFileObject $headImage (required)
     * @param  string $name (required)
     * @param  string $description (required)
     * @param  string $contactPerson (required)
     * @param  string $contactPersonMobile (required)
     * @param  string $contactPersonCardId (required)
     * @param  string $corporation (required)
     * @param  string $corporationLicence (required)
     * @param  int $industryId (required)
     * @param  int $accountId (required)
     * @param  string $contactPersonTele (optional)
     * @param  string $businessContent (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function wechatAdvertiserLocalBusinessUpdateRequest($headImage, $name, $description, $contactPerson, $contactPersonMobile, $contactPersonCardId, $corporation, $corporationLicence, $industryId, $accountId, $contactPersonTele = null, $businessContent = null)
    {
        // verify the required parameter 'headImage' is set
        if ($headImage === null || (is_array($headImage) && count($headImage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headImage when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'contactPerson' is set
        if ($contactPerson === null || (is_array($contactPerson) && count($contactPerson) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPerson when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'contactPersonMobile' is set
        if ($contactPersonMobile === null || (is_array($contactPersonMobile) && count($contactPersonMobile) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPersonMobile when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'contactPersonCardId' is set
        if ($contactPersonCardId === null || (is_array($contactPersonCardId) && count($contactPersonCardId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contactPersonCardId when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'corporation' is set
        if ($corporation === null || (is_array($corporation) && count($corporation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporation when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'corporationLicence' is set
        if ($corporationLicence === null || (is_array($corporationLicence) && count($corporationLicence) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $corporationLicence when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'industryId' is set
        if ($industryId === null || (is_array($industryId) && count($industryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $industryId when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling wechatAdvertiserLocalBusinessUpdate'
            );
        }

        $resourcePath = '/wechat_advertiser_local_business/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($headImage !== null) {
            $multipart = true;
            $formParams['head_image'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($headImage), 'rb');
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($contactPerson !== null) {
            $formParams['contact_person'] = ObjectSerializer::toFormValue($contactPerson);
        }
        // form params
        if ($contactPersonMobile !== null) {
            $formParams['contact_person_mobile'] = ObjectSerializer::toFormValue($contactPersonMobile);
        }
        // form params
        if ($contactPersonCardId !== null) {
            $formParams['contact_person_card_id'] = ObjectSerializer::toFormValue($contactPersonCardId);
        }
        // form params
        if ($contactPersonTele !== null) {
            $formParams['contact_person_tele'] = ObjectSerializer::toFormValue($contactPersonTele);
        }
        // form params
        if ($corporation !== null) {
            $formParams['corporation'] = ObjectSerializer::toFormValue($corporation);
        }
        // form params
        if ($corporationLicence !== null) {
            $formParams['corporation_licence'] = ObjectSerializer::toFormValue($corporationLicence);
        }
        // form params
        if ($businessContent !== null) {
            $formParams['business_content'] = ObjectSerializer::toFormValue($businessContent);
        }
        // form params
        if ($industryId !== null) {
            $formParams['industry_id'] = ObjectSerializer::toFormValue($industryId);
        }
        // form params
        if ($accountId !== null) {
            $formParams['account_id'] = ObjectSerializer::toFormValue($accountId);
        }
        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['multipart/form-data'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('nonce');
        if ($apiKey !== null) {
            $queryParams['nonce'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
