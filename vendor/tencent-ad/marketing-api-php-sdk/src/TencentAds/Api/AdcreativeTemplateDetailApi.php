<?php
/**
 * AdcreativeTemplateDetailApi
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TencentAds\ApiException;
use TencentAds\Configuration;
use TencentAds\HeaderSelector;
use TencentAds\ObjectSerializer;

/**
 * AdcreativeTemplateDetailApi Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AdcreativeTemplateDetailApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adcreativeTemplateDetailGet
     *
     * 获取创意规格信息
     *
     * @param  int $adcreativeTemplateId adcreativeTemplateId (required)
     * @param  string $promotedObjectType promotedObjectType (required)
     * @param  int $accountId accountId (optional)
     * @param  bool $automaticSiteEnabled automaticSiteEnabled (optional)
     * @param  string[] $siteSet siteSet (optional)
     * @param  bool $isDynamicCreativeAd isDynamicCreativeAd (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TencentAds\Model\AdcreativeTemplateDetailGetResponse
     */
    public function adcreativeTemplateDetailGet($adcreativeTemplateId, $promotedObjectType, $accountId = null, $automaticSiteEnabled = null, $siteSet = null, $isDynamicCreativeAd = null, $fields = null)
    {
        list($response) = $this->adcreativeTemplateDetailGetWithHttpInfo($adcreativeTemplateId, $promotedObjectType, $accountId, $automaticSiteEnabled, $siteSet, $isDynamicCreativeAd, $fields);
        return $response;
    }

    /**
     * Operation adcreativeTemplateDetailGetWithHttpInfo
     *
     * 获取创意规格信息
     *
     * @param  int $adcreativeTemplateId (required)
     * @param  string $promotedObjectType (required)
     * @param  int $accountId (optional)
     * @param  bool $automaticSiteEnabled (optional)
     * @param  string[] $siteSet (optional)
     * @param  bool $isDynamicCreativeAd (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TencentAds\Model\AdcreativeTemplateDetailGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function adcreativeTemplateDetailGetWithHttpInfo($adcreativeTemplateId, $promotedObjectType, $accountId = null, $automaticSiteEnabled = null, $siteSet = null, $isDynamicCreativeAd = null, $fields = null)
    {
        $returnType = '\TencentAds\Model\AdcreativeTemplateDetailGetResponse';
        $request = $this->adcreativeTemplateDetailGetRequest($adcreativeTemplateId, $promotedObjectType, $accountId, $automaticSiteEnabled, $siteSet, $isDynamicCreativeAd, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TencentAds\Model\AdcreativeTemplateDetailGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adcreativeTemplateDetailGetAsync
     *
     * 获取创意规格信息
     *
     * @param  int $adcreativeTemplateId (required)
     * @param  string $promotedObjectType (required)
     * @param  int $accountId (optional)
     * @param  bool $automaticSiteEnabled (optional)
     * @param  string[] $siteSet (optional)
     * @param  bool $isDynamicCreativeAd (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adcreativeTemplateDetailGetAsync($adcreativeTemplateId, $promotedObjectType, $accountId = null, $automaticSiteEnabled = null, $siteSet = null, $isDynamicCreativeAd = null, $fields = null)
    {
        return $this->adcreativeTemplateDetailGetAsyncWithHttpInfo($adcreativeTemplateId, $promotedObjectType, $accountId, $automaticSiteEnabled, $siteSet, $isDynamicCreativeAd, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adcreativeTemplateDetailGetAsyncWithHttpInfo
     *
     * 获取创意规格信息
     *
     * @param  int $adcreativeTemplateId (required)
     * @param  string $promotedObjectType (required)
     * @param  int $accountId (optional)
     * @param  bool $automaticSiteEnabled (optional)
     * @param  string[] $siteSet (optional)
     * @param  bool $isDynamicCreativeAd (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adcreativeTemplateDetailGetAsyncWithHttpInfo($adcreativeTemplateId, $promotedObjectType, $accountId = null, $automaticSiteEnabled = null, $siteSet = null, $isDynamicCreativeAd = null, $fields = null)
    {
        $returnType = '\TencentAds\Model\AdcreativeTemplateDetailGetResponse';
        $request = $this->adcreativeTemplateDetailGetRequest($adcreativeTemplateId, $promotedObjectType, $accountId, $automaticSiteEnabled, $siteSet, $isDynamicCreativeAd, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adcreativeTemplateDetailGet'
     *
     * @param  int $adcreativeTemplateId (required)
     * @param  string $promotedObjectType (required)
     * @param  int $accountId (optional)
     * @param  bool $automaticSiteEnabled (optional)
     * @param  string[] $siteSet (optional)
     * @param  bool $isDynamicCreativeAd (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function adcreativeTemplateDetailGetRequest($adcreativeTemplateId, $promotedObjectType, $accountId = null, $automaticSiteEnabled = null, $siteSet = null, $isDynamicCreativeAd = null, $fields = null)
    {
        // verify the required parameter 'adcreativeTemplateId' is set
        if ($adcreativeTemplateId === null || (is_array($adcreativeTemplateId) && count($adcreativeTemplateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adcreativeTemplateId when calling adcreativeTemplateDetailGet'
            );
        }
        // verify the required parameter 'promotedObjectType' is set
        if ($promotedObjectType === null || (is_array($promotedObjectType) && count($promotedObjectType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $promotedObjectType when calling adcreativeTemplateDetailGet'
            );
        }

        $resourcePath = '/adcreative_template_detail/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($adcreativeTemplateId !== null) {
            $queryParams['adcreative_template_id'] = ObjectSerializer::toQueryValue($adcreativeTemplateId);
        }
        // query params
        if ($promotedObjectType !== null) {
            $queryParams['promoted_object_type'] = ObjectSerializer::toQueryValue($promotedObjectType);
        }
        // query params
        if ($accountId !== null) {
            $queryParams['account_id'] = ObjectSerializer::toQueryValue($accountId);
        }
        // query params
        if ($automaticSiteEnabled !== null) {
            $queryParams['automatic_site_enabled'] = ObjectSerializer::toQueryValue($automaticSiteEnabled);
        }
        // query params
        if (is_array($siteSet)) {
            $queryParams['site_set'] = $siteSet;
        } else
        if ($siteSet !== null) {
            $queryParams['site_set'] = ObjectSerializer::toQueryValue($siteSet);
        }
        // query params
        if ($isDynamicCreativeAd !== null) {
            $queryParams['is_dynamic_creative_ad'] = ObjectSerializer::toQueryValue($isDynamicCreativeAd);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['text/plain'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('access_token');
        if ($apiKey !== null) {
            $queryParams['access_token'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('nonce');
        if ($apiKey !== null) {
            $queryParams['nonce'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('timestamp');
        if ($apiKey !== null) {
            $queryParams['timestamp'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
