<?php
/**
 * OauthApi
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use TencentAds\ApiException;
use TencentAds\Configuration;
use TencentAds\HeaderSelector;
use TencentAds\ObjectSerializer;

/**
 * OauthApi Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OauthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oauthAuthorize
     *
     * 获取Authorization Code
     *
     * @param  int $clientId clientId (required)
     * @param  string $redirectUri redirectUri (required)
     * @param  string $state state (optional)
     * @param  string $scope scope (optional)
     * @param  string $accountType accountType (optional)
     * @param  int $accountDisplayNumber accountDisplayNumber (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function oauthAuthorize($clientId, $redirectUri, $state = null, $scope = null, $accountType = null, $accountDisplayNumber = null, $fields = null)
    {
        list($response) = $this->oauthAuthorizeWithHttpInfo($clientId, $redirectUri, $state, $scope, $accountType, $accountDisplayNumber, $fields);
        return $response;
    }

    /**
     * Operation oauthAuthorizeWithHttpInfo
     *
     * 获取Authorization Code
     *
     * @param  int $clientId (required)
     * @param  string $redirectUri (required)
     * @param  string $state (optional)
     * @param  string $scope (optional)
     * @param  string $accountType (optional)
     * @param  int $accountDisplayNumber (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthAuthorizeWithHttpInfo($clientId, $redirectUri, $state = null, $scope = null, $accountType = null, $accountDisplayNumber = null, $fields = null)
    {
        $returnType = 'string';
        $request = $this->oauthAuthorizeRequest($clientId, $redirectUri, $state, $scope, $accountType, $accountDisplayNumber, $fields);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oauthAuthorizeAsync
     *
     * 获取Authorization Code
     *
     * @param  int $clientId (required)
     * @param  string $redirectUri (required)
     * @param  string $state (optional)
     * @param  string $scope (optional)
     * @param  string $accountType (optional)
     * @param  int $accountDisplayNumber (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oauthAuthorizeAsync($clientId, $redirectUri, $state = null, $scope = null, $accountType = null, $accountDisplayNumber = null, $fields = null)
    {
        return $this->oauthAuthorizeAsyncWithHttpInfo($clientId, $redirectUri, $state, $scope, $accountType, $accountDisplayNumber, $fields)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oauthAuthorizeAsyncWithHttpInfo
     *
     * 获取Authorization Code
     *
     * @param  int $clientId (required)
     * @param  string $redirectUri (required)
     * @param  string $state (optional)
     * @param  string $scope (optional)
     * @param  string $accountType (optional)
     * @param  int $accountDisplayNumber (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oauthAuthorizeAsyncWithHttpInfo($clientId, $redirectUri, $state = null, $scope = null, $accountType = null, $accountDisplayNumber = null, $fields = null)
    {
        $returnType = 'string';
        $request = $this->oauthAuthorizeRequest($clientId, $redirectUri, $state, $scope, $accountType, $accountDisplayNumber, $fields);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oauthAuthorize'
     *
     * @param  int $clientId (required)
     * @param  string $redirectUri (required)
     * @param  string $state (optional)
     * @param  string $scope (optional)
     * @param  string $accountType (optional)
     * @param  int $accountDisplayNumber (optional)
     * @param  string[] $fields 返回参数的字段列表 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function oauthAuthorizeRequest($clientId, $redirectUri, $state = null, $scope = null, $accountType = null, $accountDisplayNumber = null, $fields = null)
    {
        // verify the required parameter 'clientId' is set
        if ($clientId === null || (is_array($clientId) && count($clientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling oauthAuthorize'
            );
        }
        // verify the required parameter 'redirectUri' is set
        if ($redirectUri === null || (is_array($redirectUri) && count($redirectUri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirectUri when calling oauthAuthorize'
            );
        }

        $resourcePath = '/oauth/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientId !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($clientId);
        }
        // query params
        if ($redirectUri !== null) {
            $queryParams['redirect_uri'] = ObjectSerializer::toQueryValue($redirectUri);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($scope !== null) {
            $queryParams['scope'] = ObjectSerializer::toQueryValue($scope);
        }
        // query params
        if ($accountType !== null) {
            $queryParams['account_type'] = ObjectSerializer::toQueryValue($accountType);
        }
        // query params
        if ($accountDisplayNumber !== null) {
            $queryParams['account_display_number'] = ObjectSerializer::toQueryValue($accountDisplayNumber);
        }
        // query params
        if (is_array($fields)) {
            $queryParams['fields'] = $fields;
        } else
        if ($fields !== null) {
            $queryParams['fields'] = ObjectSerializer::toQueryValue($fields);
        }


        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['text/plain'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oauthToken
     *
     * 通过Authorization Code获取Access Token或刷新Access Token
     *
     * @param  int $clientId clientId (required)
     * @param  string $clientSecret clientSecret (required)
     * @param  string $grantType grantType (required)
     * @param  string $authorizationCode authorizationCode (optional)
     * @param  string $refreshToken refreshToken (optional)
     * @param  string $redirectUri 应用回调地址，当 grant_type&#x3D;authorization_code时，redirect_uri 为必传参数，仅支持 http 和 https，不支持指定端口号，且传入的地址需要与获取authorization_code时，传入的回调地址保持一致 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \TencentAds\Model\OauthTokenResponse
     */
    public function oauthToken($clientId, $clientSecret, $grantType, $authorizationCode = null, $refreshToken = null, $redirectUri = null)
    {
        list($response) = $this->oauthTokenWithHttpInfo($clientId, $clientSecret, $grantType, $authorizationCode, $refreshToken, $redirectUri);
        return $response;
    }

    /**
     * Operation oauthTokenWithHttpInfo
     *
     * 通过Authorization Code获取Access Token或刷新Access Token
     *
     * @param  int $clientId (required)
     * @param  string $clientSecret (required)
     * @param  string $grantType (required)
     * @param  string $authorizationCode (optional)
     * @param  string $refreshToken (optional)
     * @param  string $redirectUri 应用回调地址，当 grant_type&#x3D;authorization_code时，redirect_uri 为必传参数，仅支持 http 和 https，不支持指定端口号，且传入的地址需要与获取authorization_code时，传入的回调地址保持一致 (optional)
     *
     * @throws \TencentAds\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \TencentAds\Model\OauthTokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function oauthTokenWithHttpInfo($clientId, $clientSecret, $grantType, $authorizationCode = null, $refreshToken = null, $redirectUri = null)
    {
        $returnType = '\TencentAds\Model\OauthTokenResponse';
        $request = $this->oauthTokenRequest($clientId, $clientSecret, $grantType, $authorizationCode, $refreshToken, $redirectUri);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\TencentAds\Model\OauthTokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oauthTokenAsync
     *
     * 通过Authorization Code获取Access Token或刷新Access Token
     *
     * @param  int $clientId (required)
     * @param  string $clientSecret (required)
     * @param  string $grantType (required)
     * @param  string $authorizationCode (optional)
     * @param  string $refreshToken (optional)
     * @param  string $redirectUri 应用回调地址，当 grant_type&#x3D;authorization_code时，redirect_uri 为必传参数，仅支持 http 和 https，不支持指定端口号，且传入的地址需要与获取authorization_code时，传入的回调地址保持一致 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oauthTokenAsync($clientId, $clientSecret, $grantType, $authorizationCode = null, $refreshToken = null, $redirectUri = null)
    {
        return $this->oauthTokenAsyncWithHttpInfo($clientId, $clientSecret, $grantType, $authorizationCode, $refreshToken, $redirectUri)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oauthTokenAsyncWithHttpInfo
     *
     * 通过Authorization Code获取Access Token或刷新Access Token
     *
     * @param  int $clientId (required)
     * @param  string $clientSecret (required)
     * @param  string $grantType (required)
     * @param  string $authorizationCode (optional)
     * @param  string $refreshToken (optional)
     * @param  string $redirectUri 应用回调地址，当 grant_type&#x3D;authorization_code时，redirect_uri 为必传参数，仅支持 http 和 https，不支持指定端口号，且传入的地址需要与获取authorization_code时，传入的回调地址保持一致 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oauthTokenAsyncWithHttpInfo($clientId, $clientSecret, $grantType, $authorizationCode = null, $refreshToken = null, $redirectUri = null)
    {
        $returnType = '\TencentAds\Model\OauthTokenResponse';
        $request = $this->oauthTokenRequest($clientId, $clientSecret, $grantType, $authorizationCode, $refreshToken, $redirectUri);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oauthToken'
     *
     * @param  int $clientId (required)
     * @param  string $clientSecret (required)
     * @param  string $grantType (required)
     * @param  string $authorizationCode (optional)
     * @param  string $refreshToken (optional)
     * @param  string $redirectUri 应用回调地址，当 grant_type&#x3D;authorization_code时，redirect_uri 为必传参数，仅支持 http 和 https，不支持指定端口号，且传入的地址需要与获取authorization_code时，传入的回调地址保持一致 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function oauthTokenRequest($clientId, $clientSecret, $grantType, $authorizationCode = null, $refreshToken = null, $redirectUri = null)
    {
        // verify the required parameter 'clientId' is set
        if ($clientId === null || (is_array($clientId) && count($clientId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientId when calling oauthToken'
            );
        }
        // verify the required parameter 'clientSecret' is set
        if ($clientSecret === null || (is_array($clientSecret) && count($clientSecret) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clientSecret when calling oauthToken'
            );
        }
        // verify the required parameter 'grantType' is set
        if ($grantType === null || (is_array($grantType) && count($grantType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grantType when calling oauthToken'
            );
        }

        $resourcePath = '/oauth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientId !== null) {
            $queryParams['client_id'] = ObjectSerializer::toQueryValue($clientId);
        }
        // query params
        if ($clientSecret !== null) {
            $queryParams['client_secret'] = ObjectSerializer::toQueryValue($clientSecret);
        }
        // query params
        if ($grantType !== null) {
            $queryParams['grant_type'] = ObjectSerializer::toQueryValue($grantType);
        }
        // query params
        if ($authorizationCode !== null) {
            $queryParams['authorization_code'] = ObjectSerializer::toQueryValue($authorizationCode);
        }
        // query params
        if ($refreshToken !== null) {
            $queryParams['refresh_token'] = ObjectSerializer::toQueryValue($refreshToken);
        }
        // query params
        if ($redirectUri !== null) {
            $queryParams['redirect_uri'] = ObjectSerializer::toQueryValue($redirectUri);
        }


        // body params
        $_tempBody = null;

        if (in_array('multipart/form-data', ['text/plain'])) {
            $multipart = true;
        }
        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/plain']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
