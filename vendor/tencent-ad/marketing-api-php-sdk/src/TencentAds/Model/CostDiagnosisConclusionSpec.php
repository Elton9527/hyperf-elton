<?php
/**
 * CostDiagnosisConclusionSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CostDiagnosisConclusionSpec Class Doc Comment
 *
 * @category Class
 * @description 预算维度的曝光评估结果
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CostDiagnosisConclusionSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'cost_diagnosis_conclusion_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'costDiagnosisScore' => 'int',
        'balance' => 'int',
        'adDailyBudget' => 'int',
        'adRealtimeAvailableBudget' => 'int',
        'adCost' => 'int',
        'campainDailyBudget' => 'int',
        'campainCost' => 'int',
        'campainRealtimeAvailableBudget' => 'int',
        'accountDailyBudget' => 'int',
        'accountCost' => 'int',
        'accountRealtimeAvailableBudget' => 'int',
        'conclusion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'costDiagnosisScore' => 'int64',
        'balance' => 'int64',
        'adDailyBudget' => 'int64',
        'adRealtimeAvailableBudget' => 'int64',
        'adCost' => 'int64',
        'campainDailyBudget' => 'int64',
        'campainCost' => 'int64',
        'campainRealtimeAvailableBudget' => 'int64',
        'accountDailyBudget' => 'int64',
        'accountCost' => 'int64',
        'accountRealtimeAvailableBudget' => 'int64',
        'conclusion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'costDiagnosisScore' => 'cost_diagnosis_score',
        'balance' => 'balance',
        'adDailyBudget' => 'ad_daily_budget',
        'adRealtimeAvailableBudget' => 'ad_realtime_available_budget',
        'adCost' => 'ad_cost',
        'campainDailyBudget' => 'campain_daily_budget',
        'campainCost' => 'campain_cost',
        'campainRealtimeAvailableBudget' => 'campain_realtime_available_budget',
        'accountDailyBudget' => 'account_daily_budget',
        'accountCost' => 'account_cost',
        'accountRealtimeAvailableBudget' => 'account_realtime_available_budget',
        'conclusion' => 'conclusion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'costDiagnosisScore' => 'setCostDiagnosisScore',
        'balance' => 'setBalance',
        'adDailyBudget' => 'setAdDailyBudget',
        'adRealtimeAvailableBudget' => 'setAdRealtimeAvailableBudget',
        'adCost' => 'setAdCost',
        'campainDailyBudget' => 'setCampainDailyBudget',
        'campainCost' => 'setCampainCost',
        'campainRealtimeAvailableBudget' => 'setCampainRealtimeAvailableBudget',
        'accountDailyBudget' => 'setAccountDailyBudget',
        'accountCost' => 'setAccountCost',
        'accountRealtimeAvailableBudget' => 'setAccountRealtimeAvailableBudget',
        'conclusion' => 'setConclusion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'costDiagnosisScore' => 'getCostDiagnosisScore',
        'balance' => 'getBalance',
        'adDailyBudget' => 'getAdDailyBudget',
        'adRealtimeAvailableBudget' => 'getAdRealtimeAvailableBudget',
        'adCost' => 'getAdCost',
        'campainDailyBudget' => 'getCampainDailyBudget',
        'campainCost' => 'getCampainCost',
        'campainRealtimeAvailableBudget' => 'getCampainRealtimeAvailableBudget',
        'accountDailyBudget' => 'getAccountDailyBudget',
        'accountCost' => 'getAccountCost',
        'accountRealtimeAvailableBudget' => 'getAccountRealtimeAvailableBudget',
        'conclusion' => 'getConclusion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['costDiagnosisScore'] = isset($data['costDiagnosisScore']) ? $data['costDiagnosisScore'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['adDailyBudget'] = isset($data['adDailyBudget']) ? $data['adDailyBudget'] : null;
        $this->container['adRealtimeAvailableBudget'] = isset($data['adRealtimeAvailableBudget']) ? $data['adRealtimeAvailableBudget'] : null;
        $this->container['adCost'] = isset($data['adCost']) ? $data['adCost'] : null;
        $this->container['campainDailyBudget'] = isset($data['campainDailyBudget']) ? $data['campainDailyBudget'] : null;
        $this->container['campainCost'] = isset($data['campainCost']) ? $data['campainCost'] : null;
        $this->container['campainRealtimeAvailableBudget'] = isset($data['campainRealtimeAvailableBudget']) ? $data['campainRealtimeAvailableBudget'] : null;
        $this->container['accountDailyBudget'] = isset($data['accountDailyBudget']) ? $data['accountDailyBudget'] : null;
        $this->container['accountCost'] = isset($data['accountCost']) ? $data['accountCost'] : null;
        $this->container['accountRealtimeAvailableBudget'] = isset($data['accountRealtimeAvailableBudget']) ? $data['accountRealtimeAvailableBudget'] : null;
        $this->container['conclusion'] = isset($data['conclusion']) ? $data['conclusion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets costDiagnosisScore
     *
     * @return int
     */
    public function getCostDiagnosisScore()
    {
        return $this->container['costDiagnosisScore'];
    }

    /**
     * Sets costDiagnosisScore
     *
     * @param int $costDiagnosisScore costDiagnosisScore
     *
     * @return $this
     */
    public function setCostDiagnosisScore($costDiagnosisScore)
    {
        $this->container['costDiagnosisScore'] = $costDiagnosisScore;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int $balance balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets adDailyBudget
     *
     * @return int
     */
    public function getAdDailyBudget()
    {
        return $this->container['adDailyBudget'];
    }

    /**
     * Sets adDailyBudget
     *
     * @param int $adDailyBudget adDailyBudget
     *
     * @return $this
     */
    public function setAdDailyBudget($adDailyBudget)
    {
        $this->container['adDailyBudget'] = $adDailyBudget;

        return $this;
    }

    /**
     * Gets adRealtimeAvailableBudget
     *
     * @return int
     */
    public function getAdRealtimeAvailableBudget()
    {
        return $this->container['adRealtimeAvailableBudget'];
    }

    /**
     * Sets adRealtimeAvailableBudget
     *
     * @param int $adRealtimeAvailableBudget adRealtimeAvailableBudget
     *
     * @return $this
     */
    public function setAdRealtimeAvailableBudget($adRealtimeAvailableBudget)
    {
        $this->container['adRealtimeAvailableBudget'] = $adRealtimeAvailableBudget;

        return $this;
    }

    /**
     * Gets adCost
     *
     * @return int
     */
    public function getAdCost()
    {
        return $this->container['adCost'];
    }

    /**
     * Sets adCost
     *
     * @param int $adCost adCost
     *
     * @return $this
     */
    public function setAdCost($adCost)
    {
        $this->container['adCost'] = $adCost;

        return $this;
    }

    /**
     * Gets campainDailyBudget
     *
     * @return int
     */
    public function getCampainDailyBudget()
    {
        return $this->container['campainDailyBudget'];
    }

    /**
     * Sets campainDailyBudget
     *
     * @param int $campainDailyBudget campainDailyBudget
     *
     * @return $this
     */
    public function setCampainDailyBudget($campainDailyBudget)
    {
        $this->container['campainDailyBudget'] = $campainDailyBudget;

        return $this;
    }

    /**
     * Gets campainCost
     *
     * @return int
     */
    public function getCampainCost()
    {
        return $this->container['campainCost'];
    }

    /**
     * Sets campainCost
     *
     * @param int $campainCost campainCost
     *
     * @return $this
     */
    public function setCampainCost($campainCost)
    {
        $this->container['campainCost'] = $campainCost;

        return $this;
    }

    /**
     * Gets campainRealtimeAvailableBudget
     *
     * @return int
     */
    public function getCampainRealtimeAvailableBudget()
    {
        return $this->container['campainRealtimeAvailableBudget'];
    }

    /**
     * Sets campainRealtimeAvailableBudget
     *
     * @param int $campainRealtimeAvailableBudget campainRealtimeAvailableBudget
     *
     * @return $this
     */
    public function setCampainRealtimeAvailableBudget($campainRealtimeAvailableBudget)
    {
        $this->container['campainRealtimeAvailableBudget'] = $campainRealtimeAvailableBudget;

        return $this;
    }

    /**
     * Gets accountDailyBudget
     *
     * @return int
     */
    public function getAccountDailyBudget()
    {
        return $this->container['accountDailyBudget'];
    }

    /**
     * Sets accountDailyBudget
     *
     * @param int $accountDailyBudget accountDailyBudget
     *
     * @return $this
     */
    public function setAccountDailyBudget($accountDailyBudget)
    {
        $this->container['accountDailyBudget'] = $accountDailyBudget;

        return $this;
    }

    /**
     * Gets accountCost
     *
     * @return int
     */
    public function getAccountCost()
    {
        return $this->container['accountCost'];
    }

    /**
     * Sets accountCost
     *
     * @param int $accountCost accountCost
     *
     * @return $this
     */
    public function setAccountCost($accountCost)
    {
        $this->container['accountCost'] = $accountCost;

        return $this;
    }

    /**
     * Gets accountRealtimeAvailableBudget
     *
     * @return int
     */
    public function getAccountRealtimeAvailableBudget()
    {
        return $this->container['accountRealtimeAvailableBudget'];
    }

    /**
     * Sets accountRealtimeAvailableBudget
     *
     * @param int $accountRealtimeAvailableBudget accountRealtimeAvailableBudget
     *
     * @return $this
     */
    public function setAccountRealtimeAvailableBudget($accountRealtimeAvailableBudget)
    {
        $this->container['accountRealtimeAvailableBudget'] = $accountRealtimeAvailableBudget;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     *
     * @param string $conclusion conclusion
     *
     * @return $this
     */
    public function setConclusion($conclusion)
    {
        $this->container['conclusion'] = $conclusion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


