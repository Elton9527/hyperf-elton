<?php
/**
 * BidSimulateResultItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * BidSimulateResultItem Class Doc Comment
 *
 * @category Class
 * @description 出价模拟结果
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BidSimulateResultItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'bid_simulate_result_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bid' => 'int',
        'exposeCnt' => 'int',
        'clickCnt' => 'int',
        'conversionCnt' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bid' => 'int64',
        'exposeCnt' => 'int64',
        'clickCnt' => 'int64',
        'conversionCnt' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bid' => 'bid',
        'exposeCnt' => 'expose_cnt',
        'clickCnt' => 'click_cnt',
        'conversionCnt' => 'conversion_cnt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bid' => 'setBid',
        'exposeCnt' => 'setExposeCnt',
        'clickCnt' => 'setClickCnt',
        'conversionCnt' => 'setConversionCnt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bid' => 'getBid',
        'exposeCnt' => 'getExposeCnt',
        'clickCnt' => 'getClickCnt',
        'conversionCnt' => 'getConversionCnt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bid'] = isset($data['bid']) ? $data['bid'] : null;
        $this->container['exposeCnt'] = isset($data['exposeCnt']) ? $data['exposeCnt'] : null;
        $this->container['clickCnt'] = isset($data['clickCnt']) ? $data['clickCnt'] : null;
        $this->container['conversionCnt'] = isset($data['conversionCnt']) ? $data['conversionCnt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bid
     *
     * @return int
     */
    public function getBid()
    {
        return $this->container['bid'];
    }

    /**
     * Sets bid
     *
     * @param int $bid bid
     *
     * @return $this
     */
    public function setBid($bid)
    {
        $this->container['bid'] = $bid;

        return $this;
    }

    /**
     * Gets exposeCnt
     *
     * @return int
     */
    public function getExposeCnt()
    {
        return $this->container['exposeCnt'];
    }

    /**
     * Sets exposeCnt
     *
     * @param int $exposeCnt exposeCnt
     *
     * @return $this
     */
    public function setExposeCnt($exposeCnt)
    {
        $this->container['exposeCnt'] = $exposeCnt;

        return $this;
    }

    /**
     * Gets clickCnt
     *
     * @return int
     */
    public function getClickCnt()
    {
        return $this->container['clickCnt'];
    }

    /**
     * Sets clickCnt
     *
     * @param int $clickCnt clickCnt
     *
     * @return $this
     */
    public function setClickCnt($clickCnt)
    {
        $this->container['clickCnt'] = $clickCnt;

        return $this;
    }

    /**
     * Gets conversionCnt
     *
     * @return int
     */
    public function getConversionCnt()
    {
        return $this->container['conversionCnt'];
    }

    /**
     * Sets conversionCnt
     *
     * @param int $conversionCnt conversionCnt
     *
     * @return $this
     */
    public function setConversionCnt($conversionCnt)
    {
        $this->container['conversionCnt'] = $conversionCnt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


