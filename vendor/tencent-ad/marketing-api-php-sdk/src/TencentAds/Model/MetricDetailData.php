<?php
/**
 * MetricDetailData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * MetricDetailData Class Doc Comment
 *
 * @category Class
 * @description 报表效果数据
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MetricDetailData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'metric_detail_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cost' => 'int',
        'expPv' => 'int',
        'canvasCpnCouponsGetPv' => 'int',
        'canvasCpnCouponsCost' => 'int',
        'canvasCpnCouponsUsePv' => 'int',
        'purchase' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cost' => 'int64',
        'expPv' => 'int64',
        'canvasCpnCouponsGetPv' => 'int64',
        'canvasCpnCouponsCost' => 'int64',
        'canvasCpnCouponsUsePv' => 'int64',
        'purchase' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost' => 'cost',
        'expPv' => 'exp_pv',
        'canvasCpnCouponsGetPv' => 'canvas_cpn_coupons_get_pv',
        'canvasCpnCouponsCost' => 'canvas_cpn_coupons_cost',
        'canvasCpnCouponsUsePv' => 'canvas_cpn_coupons_use_pv',
        'purchase' => 'purchase'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost' => 'setCost',
        'expPv' => 'setExpPv',
        'canvasCpnCouponsGetPv' => 'setCanvasCpnCouponsGetPv',
        'canvasCpnCouponsCost' => 'setCanvasCpnCouponsCost',
        'canvasCpnCouponsUsePv' => 'setCanvasCpnCouponsUsePv',
        'purchase' => 'setPurchase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost' => 'getCost',
        'expPv' => 'getExpPv',
        'canvasCpnCouponsGetPv' => 'getCanvasCpnCouponsGetPv',
        'canvasCpnCouponsCost' => 'getCanvasCpnCouponsCost',
        'canvasCpnCouponsUsePv' => 'getCanvasCpnCouponsUsePv',
        'purchase' => 'getPurchase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['expPv'] = isset($data['expPv']) ? $data['expPv'] : null;
        $this->container['canvasCpnCouponsGetPv'] = isset($data['canvasCpnCouponsGetPv']) ? $data['canvasCpnCouponsGetPv'] : null;
        $this->container['canvasCpnCouponsCost'] = isset($data['canvasCpnCouponsCost']) ? $data['canvasCpnCouponsCost'] : null;
        $this->container['canvasCpnCouponsUsePv'] = isset($data['canvasCpnCouponsUsePv']) ? $data['canvasCpnCouponsUsePv'] : null;
        $this->container['purchase'] = isset($data['purchase']) ? $data['purchase'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cost
     *
     * @return int
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets expPv
     *
     * @return int
     */
    public function getExpPv()
    {
        return $this->container['expPv'];
    }

    /**
     * Sets expPv
     *
     * @param int $expPv expPv
     *
     * @return $this
     */
    public function setExpPv($expPv)
    {
        $this->container['expPv'] = $expPv;

        return $this;
    }

    /**
     * Gets canvasCpnCouponsGetPv
     *
     * @return int
     */
    public function getCanvasCpnCouponsGetPv()
    {
        return $this->container['canvasCpnCouponsGetPv'];
    }

    /**
     * Sets canvasCpnCouponsGetPv
     *
     * @param int $canvasCpnCouponsGetPv canvasCpnCouponsGetPv
     *
     * @return $this
     */
    public function setCanvasCpnCouponsGetPv($canvasCpnCouponsGetPv)
    {
        $this->container['canvasCpnCouponsGetPv'] = $canvasCpnCouponsGetPv;

        return $this;
    }

    /**
     * Gets canvasCpnCouponsCost
     *
     * @return int
     */
    public function getCanvasCpnCouponsCost()
    {
        return $this->container['canvasCpnCouponsCost'];
    }

    /**
     * Sets canvasCpnCouponsCost
     *
     * @param int $canvasCpnCouponsCost canvasCpnCouponsCost
     *
     * @return $this
     */
    public function setCanvasCpnCouponsCost($canvasCpnCouponsCost)
    {
        $this->container['canvasCpnCouponsCost'] = $canvasCpnCouponsCost;

        return $this;
    }

    /**
     * Gets canvasCpnCouponsUsePv
     *
     * @return int
     */
    public function getCanvasCpnCouponsUsePv()
    {
        return $this->container['canvasCpnCouponsUsePv'];
    }

    /**
     * Sets canvasCpnCouponsUsePv
     *
     * @param int $canvasCpnCouponsUsePv canvasCpnCouponsUsePv
     *
     * @return $this
     */
    public function setCanvasCpnCouponsUsePv($canvasCpnCouponsUsePv)
    {
        $this->container['canvasCpnCouponsUsePv'] = $canvasCpnCouponsUsePv;

        return $this;
    }

    /**
     * Gets purchase
     *
     * @return int
     */
    public function getPurchase()
    {
        return $this->container['purchase'];
    }

    /**
     * Sets purchase
     *
     * @param int $purchase purchase
     *
     * @return $this
     */
    public function setPurchase($purchase)
    {
        $this->container['purchase'] = $purchase;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


