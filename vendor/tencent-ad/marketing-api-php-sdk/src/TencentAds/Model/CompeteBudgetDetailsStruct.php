<?php
/**
 * CompeteBudgetDetailsStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CompeteBudgetDetailsStruct Class Doc Comment
 *
 * @category Class
 * @description 预算竞争力明细
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompeteBudgetDetailsStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'compete_budget_details_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'score' => 'int',
        'raiseAccountBalanceFlag' => 'bool',
        'recommendRecharge' => 'int',
        'accountDailyCost' => 'int',
        'accountDayBudget' => 'int',
        'campaignDailyCost' => 'int',
        'campaignDayBudget' => 'int',
        'adgroupDailyCost' => 'int',
        'adgroupDayBudget' => 'int',
        'accountBalance' => 'int',
        'conclusion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'score' => 'int64',
        'raiseAccountBalanceFlag' => null,
        'recommendRecharge' => 'int64',
        'accountDailyCost' => 'int64',
        'accountDayBudget' => 'int64',
        'campaignDailyCost' => 'int64',
        'campaignDayBudget' => 'int64',
        'adgroupDailyCost' => 'int64',
        'adgroupDayBudget' => 'int64',
        'accountBalance' => 'int64',
        'conclusion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'score' => 'score',
        'raiseAccountBalanceFlag' => 'raise_account_balance_flag',
        'recommendRecharge' => 'recommend_recharge',
        'accountDailyCost' => 'account_daily_cost',
        'accountDayBudget' => 'account_day_budget',
        'campaignDailyCost' => 'campaign_daily_cost',
        'campaignDayBudget' => 'campaign_day_budget',
        'adgroupDailyCost' => 'adgroup_daily_cost',
        'adgroupDayBudget' => 'adgroup_day_budget',
        'accountBalance' => 'account_balance',
        'conclusion' => 'conclusion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'score' => 'setScore',
        'raiseAccountBalanceFlag' => 'setRaiseAccountBalanceFlag',
        'recommendRecharge' => 'setRecommendRecharge',
        'accountDailyCost' => 'setAccountDailyCost',
        'accountDayBudget' => 'setAccountDayBudget',
        'campaignDailyCost' => 'setCampaignDailyCost',
        'campaignDayBudget' => 'setCampaignDayBudget',
        'adgroupDailyCost' => 'setAdgroupDailyCost',
        'adgroupDayBudget' => 'setAdgroupDayBudget',
        'accountBalance' => 'setAccountBalance',
        'conclusion' => 'setConclusion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'score' => 'getScore',
        'raiseAccountBalanceFlag' => 'getRaiseAccountBalanceFlag',
        'recommendRecharge' => 'getRecommendRecharge',
        'accountDailyCost' => 'getAccountDailyCost',
        'accountDayBudget' => 'getAccountDayBudget',
        'campaignDailyCost' => 'getCampaignDailyCost',
        'campaignDayBudget' => 'getCampaignDayBudget',
        'adgroupDailyCost' => 'getAdgroupDailyCost',
        'adgroupDayBudget' => 'getAdgroupDayBudget',
        'accountBalance' => 'getAccountBalance',
        'conclusion' => 'getConclusion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['raiseAccountBalanceFlag'] = isset($data['raiseAccountBalanceFlag']) ? $data['raiseAccountBalanceFlag'] : null;
        $this->container['recommendRecharge'] = isset($data['recommendRecharge']) ? $data['recommendRecharge'] : null;
        $this->container['accountDailyCost'] = isset($data['accountDailyCost']) ? $data['accountDailyCost'] : null;
        $this->container['accountDayBudget'] = isset($data['accountDayBudget']) ? $data['accountDayBudget'] : null;
        $this->container['campaignDailyCost'] = isset($data['campaignDailyCost']) ? $data['campaignDailyCost'] : null;
        $this->container['campaignDayBudget'] = isset($data['campaignDayBudget']) ? $data['campaignDayBudget'] : null;
        $this->container['adgroupDailyCost'] = isset($data['adgroupDailyCost']) ? $data['adgroupDailyCost'] : null;
        $this->container['adgroupDayBudget'] = isset($data['adgroupDayBudget']) ? $data['adgroupDayBudget'] : null;
        $this->container['accountBalance'] = isset($data['accountBalance']) ? $data['accountBalance'] : null;
        $this->container['conclusion'] = isset($data['conclusion']) ? $data['conclusion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets raiseAccountBalanceFlag
     *
     * @return bool
     */
    public function getRaiseAccountBalanceFlag()
    {
        return $this->container['raiseAccountBalanceFlag'];
    }

    /**
     * Sets raiseAccountBalanceFlag
     *
     * @param bool $raiseAccountBalanceFlag raiseAccountBalanceFlag
     *
     * @return $this
     */
    public function setRaiseAccountBalanceFlag($raiseAccountBalanceFlag)
    {
        $this->container['raiseAccountBalanceFlag'] = $raiseAccountBalanceFlag;

        return $this;
    }

    /**
     * Gets recommendRecharge
     *
     * @return int
     */
    public function getRecommendRecharge()
    {
        return $this->container['recommendRecharge'];
    }

    /**
     * Sets recommendRecharge
     *
     * @param int $recommendRecharge recommendRecharge
     *
     * @return $this
     */
    public function setRecommendRecharge($recommendRecharge)
    {
        $this->container['recommendRecharge'] = $recommendRecharge;

        return $this;
    }

    /**
     * Gets accountDailyCost
     *
     * @return int
     */
    public function getAccountDailyCost()
    {
        return $this->container['accountDailyCost'];
    }

    /**
     * Sets accountDailyCost
     *
     * @param int $accountDailyCost accountDailyCost
     *
     * @return $this
     */
    public function setAccountDailyCost($accountDailyCost)
    {
        $this->container['accountDailyCost'] = $accountDailyCost;

        return $this;
    }

    /**
     * Gets accountDayBudget
     *
     * @return int
     */
    public function getAccountDayBudget()
    {
        return $this->container['accountDayBudget'];
    }

    /**
     * Sets accountDayBudget
     *
     * @param int $accountDayBudget accountDayBudget
     *
     * @return $this
     */
    public function setAccountDayBudget($accountDayBudget)
    {
        $this->container['accountDayBudget'] = $accountDayBudget;

        return $this;
    }

    /**
     * Gets campaignDailyCost
     *
     * @return int
     */
    public function getCampaignDailyCost()
    {
        return $this->container['campaignDailyCost'];
    }

    /**
     * Sets campaignDailyCost
     *
     * @param int $campaignDailyCost campaignDailyCost
     *
     * @return $this
     */
    public function setCampaignDailyCost($campaignDailyCost)
    {
        $this->container['campaignDailyCost'] = $campaignDailyCost;

        return $this;
    }

    /**
     * Gets campaignDayBudget
     *
     * @return int
     */
    public function getCampaignDayBudget()
    {
        return $this->container['campaignDayBudget'];
    }

    /**
     * Sets campaignDayBudget
     *
     * @param int $campaignDayBudget campaignDayBudget
     *
     * @return $this
     */
    public function setCampaignDayBudget($campaignDayBudget)
    {
        $this->container['campaignDayBudget'] = $campaignDayBudget;

        return $this;
    }

    /**
     * Gets adgroupDailyCost
     *
     * @return int
     */
    public function getAdgroupDailyCost()
    {
        return $this->container['adgroupDailyCost'];
    }

    /**
     * Sets adgroupDailyCost
     *
     * @param int $adgroupDailyCost adgroupDailyCost
     *
     * @return $this
     */
    public function setAdgroupDailyCost($adgroupDailyCost)
    {
        $this->container['adgroupDailyCost'] = $adgroupDailyCost;

        return $this;
    }

    /**
     * Gets adgroupDayBudget
     *
     * @return int
     */
    public function getAdgroupDayBudget()
    {
        return $this->container['adgroupDayBudget'];
    }

    /**
     * Sets adgroupDayBudget
     *
     * @param int $adgroupDayBudget adgroupDayBudget
     *
     * @return $this
     */
    public function setAdgroupDayBudget($adgroupDayBudget)
    {
        $this->container['adgroupDayBudget'] = $adgroupDayBudget;

        return $this;
    }

    /**
     * Gets accountBalance
     *
     * @return int
     */
    public function getAccountBalance()
    {
        return $this->container['accountBalance'];
    }

    /**
     * Sets accountBalance
     *
     * @param int $accountBalance accountBalance
     *
     * @return $this
     */
    public function setAccountBalance($accountBalance)
    {
        $this->container['accountBalance'] = $accountBalance;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     *
     * @param string $conclusion conclusion
     *
     * @return $this
     */
    public function setConclusion($conclusion)
    {
        $this->container['conclusion'] = $conclusion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


