<?php
/**
 * SplitTestsUpdateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * SplitTestsUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SplitTestsUpdateRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SplitTestsUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'splitTestId' => 'int',
        'splitTestStatus' => '\TencentAds\Model\SplitTestStatus',
        'splitTestName' => 'string',
        'adgroupIdList' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'splitTestId' => 'int64',
        'splitTestStatus' => null,
        'splitTestName' => null,
        'adgroupIdList' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'splitTestId' => 'split_test_id',
        'splitTestStatus' => 'split_test_status',
        'splitTestName' => 'split_test_name',
        'adgroupIdList' => 'adgroup_id_list'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'splitTestId' => 'setSplitTestId',
        'splitTestStatus' => 'setSplitTestStatus',
        'splitTestName' => 'setSplitTestName',
        'adgroupIdList' => 'setAdgroupIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'splitTestId' => 'getSplitTestId',
        'splitTestStatus' => 'getSplitTestStatus',
        'splitTestName' => 'getSplitTestName',
        'adgroupIdList' => 'getAdgroupIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['splitTestId'] = isset($data['splitTestId']) ? $data['splitTestId'] : null;
        $this->container['splitTestStatus'] = isset($data['splitTestStatus']) ? $data['splitTestStatus'] : null;
        $this->container['splitTestName'] = isset($data['splitTestName']) ? $data['splitTestName'] : null;
        $this->container['adgroupIdList'] = isset($data['adgroupIdList']) ? $data['adgroupIdList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets splitTestId
     *
     * @return int
     */
    public function getSplitTestId()
    {
        return $this->container['splitTestId'];
    }

    /**
     * Sets splitTestId
     *
     * @param int $splitTestId splitTestId
     *
     * @return $this
     */
    public function setSplitTestId($splitTestId)
    {
        $this->container['splitTestId'] = $splitTestId;

        return $this;
    }

    /**
     * Gets splitTestStatus
     *
     * @return \TencentAds\Model\SplitTestStatus
     */
    public function getSplitTestStatus()
    {
        return $this->container['splitTestStatus'];
    }

    /**
     * Sets splitTestStatus
     *
     * @param \TencentAds\Model\SplitTestStatus $splitTestStatus splitTestStatus
     *
     * @return $this
     */
    public function setSplitTestStatus($splitTestStatus)
    {
        $this->container['splitTestStatus'] = $splitTestStatus;

        return $this;
    }

    /**
     * Gets splitTestName
     *
     * @return string
     */
    public function getSplitTestName()
    {
        return $this->container['splitTestName'];
    }

    /**
     * Sets splitTestName
     *
     * @param string $splitTestName splitTestName
     *
     * @return $this
     */
    public function setSplitTestName($splitTestName)
    {
        $this->container['splitTestName'] = $splitTestName;

        return $this;
    }

    /**
     * Gets adgroupIdList
     *
     * @return int[]
     */
    public function getAdgroupIdList()
    {
        return $this->container['adgroupIdList'];
    }

    /**
     * Sets adgroupIdList
     *
     * @param int[] $adgroupIdList adgroupIdList
     *
     * @return $this
     */
    public function setAdgroupIdList($adgroupIdList)
    {
        $this->container['adgroupIdList'] = $adgroupIdList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


