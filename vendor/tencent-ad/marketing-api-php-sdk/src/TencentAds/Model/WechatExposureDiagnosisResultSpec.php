<?php
/**
 * WechatExposureDiagnosisResultSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WechatExposureDiagnosisResultSpec Class Doc Comment
 *
 * @category Class
 * @description 微信广告的曝光诊断结论
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WechatExposureDiagnosisResultSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'wechat_exposure_diagnosis_result_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'diagnosisConclusionSpec' => '\TencentAds\Model\DiagnosisConclusionSpec',
        'targetingDiagnosisConclusionSpec' => '\TencentAds\Model\TargetingDiagnosisConclusionSpec',
        'costDiagnosisConclusionSpec' => '\TencentAds\Model\CostDiagnosisConclusionSpec',
        'compititionDiagnosisConclusionSpec' => '\TencentAds\Model\CompititionDiagnosisConclusionSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'diagnosisConclusionSpec' => null,
        'targetingDiagnosisConclusionSpec' => null,
        'costDiagnosisConclusionSpec' => null,
        'compititionDiagnosisConclusionSpec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'diagnosisConclusionSpec' => 'diagnosis_conclusion_spec',
        'targetingDiagnosisConclusionSpec' => 'targeting_diagnosis_conclusion_spec',
        'costDiagnosisConclusionSpec' => 'cost_diagnosis_conclusion_spec',
        'compititionDiagnosisConclusionSpec' => 'compitition_diagnosis_conclusion_spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'diagnosisConclusionSpec' => 'setDiagnosisConclusionSpec',
        'targetingDiagnosisConclusionSpec' => 'setTargetingDiagnosisConclusionSpec',
        'costDiagnosisConclusionSpec' => 'setCostDiagnosisConclusionSpec',
        'compititionDiagnosisConclusionSpec' => 'setCompititionDiagnosisConclusionSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'diagnosisConclusionSpec' => 'getDiagnosisConclusionSpec',
        'targetingDiagnosisConclusionSpec' => 'getTargetingDiagnosisConclusionSpec',
        'costDiagnosisConclusionSpec' => 'getCostDiagnosisConclusionSpec',
        'compititionDiagnosisConclusionSpec' => 'getCompititionDiagnosisConclusionSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['diagnosisConclusionSpec'] = isset($data['diagnosisConclusionSpec']) ? $data['diagnosisConclusionSpec'] : null;
        $this->container['targetingDiagnosisConclusionSpec'] = isset($data['targetingDiagnosisConclusionSpec']) ? $data['targetingDiagnosisConclusionSpec'] : null;
        $this->container['costDiagnosisConclusionSpec'] = isset($data['costDiagnosisConclusionSpec']) ? $data['costDiagnosisConclusionSpec'] : null;
        $this->container['compititionDiagnosisConclusionSpec'] = isset($data['compititionDiagnosisConclusionSpec']) ? $data['compititionDiagnosisConclusionSpec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets diagnosisConclusionSpec
     *
     * @return \TencentAds\Model\DiagnosisConclusionSpec
     */
    public function getDiagnosisConclusionSpec()
    {
        return $this->container['diagnosisConclusionSpec'];
    }

    /**
     * Sets diagnosisConclusionSpec
     *
     * @param \TencentAds\Model\DiagnosisConclusionSpec $diagnosisConclusionSpec diagnosisConclusionSpec
     *
     * @return $this
     */
    public function setDiagnosisConclusionSpec($diagnosisConclusionSpec)
    {
        $this->container['diagnosisConclusionSpec'] = $diagnosisConclusionSpec;

        return $this;
    }

    /**
     * Gets targetingDiagnosisConclusionSpec
     *
     * @return \TencentAds\Model\TargetingDiagnosisConclusionSpec
     */
    public function getTargetingDiagnosisConclusionSpec()
    {
        return $this->container['targetingDiagnosisConclusionSpec'];
    }

    /**
     * Sets targetingDiagnosisConclusionSpec
     *
     * @param \TencentAds\Model\TargetingDiagnosisConclusionSpec $targetingDiagnosisConclusionSpec targetingDiagnosisConclusionSpec
     *
     * @return $this
     */
    public function setTargetingDiagnosisConclusionSpec($targetingDiagnosisConclusionSpec)
    {
        $this->container['targetingDiagnosisConclusionSpec'] = $targetingDiagnosisConclusionSpec;

        return $this;
    }

    /**
     * Gets costDiagnosisConclusionSpec
     *
     * @return \TencentAds\Model\CostDiagnosisConclusionSpec
     */
    public function getCostDiagnosisConclusionSpec()
    {
        return $this->container['costDiagnosisConclusionSpec'];
    }

    /**
     * Sets costDiagnosisConclusionSpec
     *
     * @param \TencentAds\Model\CostDiagnosisConclusionSpec $costDiagnosisConclusionSpec costDiagnosisConclusionSpec
     *
     * @return $this
     */
    public function setCostDiagnosisConclusionSpec($costDiagnosisConclusionSpec)
    {
        $this->container['costDiagnosisConclusionSpec'] = $costDiagnosisConclusionSpec;

        return $this;
    }

    /**
     * Gets compititionDiagnosisConclusionSpec
     *
     * @return \TencentAds\Model\CompititionDiagnosisConclusionSpec
     */
    public function getCompititionDiagnosisConclusionSpec()
    {
        return $this->container['compititionDiagnosisConclusionSpec'];
    }

    /**
     * Sets compititionDiagnosisConclusionSpec
     *
     * @param \TencentAds\Model\CompititionDiagnosisConclusionSpec $compititionDiagnosisConclusionSpec compititionDiagnosisConclusionSpec
     *
     * @return $this
     */
    public function setCompititionDiagnosisConclusionSpec($compititionDiagnosisConclusionSpec)
    {
        $this->container['compititionDiagnosisConclusionSpec'] = $compititionDiagnosisConclusionSpec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


