<?php
/**
 * EstimationGetResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * EstimationGetResponseData Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimationGetResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimationGetResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'maxActiveUserCount' => 'int',
        'approximateCount' => 'int',
        'impression' => 'int',
        'minBidAmount' => 'int',
        'maxBidAmount' => 'int',
        'suggestMinBidAmount' => 'int',
        'suggestMaxBidAmount' => 'int',
        'suggestBidContentOcpa' => 'string',
        'minUsersDaily' => 'int',
        'maxUsersDaily' => 'int',
        'minExposureDaily' => 'int',
        'maxExposureDaily' => 'int',
        'targetingStatus' => '\TencentAds\Model\TargetingStatus',
        'suggestTargeting' => 'string[]',
        'isRealExposureSupported' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'maxActiveUserCount' => 'int64',
        'approximateCount' => 'int64',
        'impression' => 'int64',
        'minBidAmount' => 'int64',
        'maxBidAmount' => 'int64',
        'suggestMinBidAmount' => 'int64',
        'suggestMaxBidAmount' => 'int64',
        'suggestBidContentOcpa' => null,
        'minUsersDaily' => 'int64',
        'maxUsersDaily' => 'int64',
        'minExposureDaily' => 'int64',
        'maxExposureDaily' => 'int64',
        'targetingStatus' => null,
        'suggestTargeting' => null,
        'isRealExposureSupported' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'maxActiveUserCount' => 'max_active_user_count',
        'approximateCount' => 'approximate_count',
        'impression' => 'impression',
        'minBidAmount' => 'min_bid_amount',
        'maxBidAmount' => 'max_bid_amount',
        'suggestMinBidAmount' => 'suggest_min_bid_amount',
        'suggestMaxBidAmount' => 'suggest_max_bid_amount',
        'suggestBidContentOcpa' => 'suggest_bid_content_ocpa',
        'minUsersDaily' => 'min_users_daily',
        'maxUsersDaily' => 'max_users_daily',
        'minExposureDaily' => 'min_exposure_daily',
        'maxExposureDaily' => 'max_exposure_daily',
        'targetingStatus' => 'targeting_status',
        'suggestTargeting' => 'suggest_targeting',
        'isRealExposureSupported' => 'is_real_exposure_supported'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'maxActiveUserCount' => 'setMaxActiveUserCount',
        'approximateCount' => 'setApproximateCount',
        'impression' => 'setImpression',
        'minBidAmount' => 'setMinBidAmount',
        'maxBidAmount' => 'setMaxBidAmount',
        'suggestMinBidAmount' => 'setSuggestMinBidAmount',
        'suggestMaxBidAmount' => 'setSuggestMaxBidAmount',
        'suggestBidContentOcpa' => 'setSuggestBidContentOcpa',
        'minUsersDaily' => 'setMinUsersDaily',
        'maxUsersDaily' => 'setMaxUsersDaily',
        'minExposureDaily' => 'setMinExposureDaily',
        'maxExposureDaily' => 'setMaxExposureDaily',
        'targetingStatus' => 'setTargetingStatus',
        'suggestTargeting' => 'setSuggestTargeting',
        'isRealExposureSupported' => 'setIsRealExposureSupported'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'maxActiveUserCount' => 'getMaxActiveUserCount',
        'approximateCount' => 'getApproximateCount',
        'impression' => 'getImpression',
        'minBidAmount' => 'getMinBidAmount',
        'maxBidAmount' => 'getMaxBidAmount',
        'suggestMinBidAmount' => 'getSuggestMinBidAmount',
        'suggestMaxBidAmount' => 'getSuggestMaxBidAmount',
        'suggestBidContentOcpa' => 'getSuggestBidContentOcpa',
        'minUsersDaily' => 'getMinUsersDaily',
        'maxUsersDaily' => 'getMaxUsersDaily',
        'minExposureDaily' => 'getMinExposureDaily',
        'maxExposureDaily' => 'getMaxExposureDaily',
        'targetingStatus' => 'getTargetingStatus',
        'suggestTargeting' => 'getSuggestTargeting',
        'isRealExposureSupported' => 'getIsRealExposureSupported'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['maxActiveUserCount'] = isset($data['maxActiveUserCount']) ? $data['maxActiveUserCount'] : null;
        $this->container['approximateCount'] = isset($data['approximateCount']) ? $data['approximateCount'] : null;
        $this->container['impression'] = isset($data['impression']) ? $data['impression'] : null;
        $this->container['minBidAmount'] = isset($data['minBidAmount']) ? $data['minBidAmount'] : null;
        $this->container['maxBidAmount'] = isset($data['maxBidAmount']) ? $data['maxBidAmount'] : null;
        $this->container['suggestMinBidAmount'] = isset($data['suggestMinBidAmount']) ? $data['suggestMinBidAmount'] : null;
        $this->container['suggestMaxBidAmount'] = isset($data['suggestMaxBidAmount']) ? $data['suggestMaxBidAmount'] : null;
        $this->container['suggestBidContentOcpa'] = isset($data['suggestBidContentOcpa']) ? $data['suggestBidContentOcpa'] : null;
        $this->container['minUsersDaily'] = isset($data['minUsersDaily']) ? $data['minUsersDaily'] : null;
        $this->container['maxUsersDaily'] = isset($data['maxUsersDaily']) ? $data['maxUsersDaily'] : null;
        $this->container['minExposureDaily'] = isset($data['minExposureDaily']) ? $data['minExposureDaily'] : null;
        $this->container['maxExposureDaily'] = isset($data['maxExposureDaily']) ? $data['maxExposureDaily'] : null;
        $this->container['targetingStatus'] = isset($data['targetingStatus']) ? $data['targetingStatus'] : null;
        $this->container['suggestTargeting'] = isset($data['suggestTargeting']) ? $data['suggestTargeting'] : null;
        $this->container['isRealExposureSupported'] = isset($data['isRealExposureSupported']) ? $data['isRealExposureSupported'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets maxActiveUserCount
     *
     * @return int
     */
    public function getMaxActiveUserCount()
    {
        return $this->container['maxActiveUserCount'];
    }

    /**
     * Sets maxActiveUserCount
     *
     * @param int $maxActiveUserCount maxActiveUserCount
     *
     * @return $this
     */
    public function setMaxActiveUserCount($maxActiveUserCount)
    {
        $this->container['maxActiveUserCount'] = $maxActiveUserCount;

        return $this;
    }

    /**
     * Gets approximateCount
     *
     * @return int
     */
    public function getApproximateCount()
    {
        return $this->container['approximateCount'];
    }

    /**
     * Sets approximateCount
     *
     * @param int $approximateCount approximateCount
     *
     * @return $this
     */
    public function setApproximateCount($approximateCount)
    {
        $this->container['approximateCount'] = $approximateCount;

        return $this;
    }

    /**
     * Gets impression
     *
     * @return int
     */
    public function getImpression()
    {
        return $this->container['impression'];
    }

    /**
     * Sets impression
     *
     * @param int $impression impression
     *
     * @return $this
     */
    public function setImpression($impression)
    {
        $this->container['impression'] = $impression;

        return $this;
    }

    /**
     * Gets minBidAmount
     *
     * @return int
     */
    public function getMinBidAmount()
    {
        return $this->container['minBidAmount'];
    }

    /**
     * Sets minBidAmount
     *
     * @param int $minBidAmount minBidAmount
     *
     * @return $this
     */
    public function setMinBidAmount($minBidAmount)
    {
        $this->container['minBidAmount'] = $minBidAmount;

        return $this;
    }

    /**
     * Gets maxBidAmount
     *
     * @return int
     */
    public function getMaxBidAmount()
    {
        return $this->container['maxBidAmount'];
    }

    /**
     * Sets maxBidAmount
     *
     * @param int $maxBidAmount maxBidAmount
     *
     * @return $this
     */
    public function setMaxBidAmount($maxBidAmount)
    {
        $this->container['maxBidAmount'] = $maxBidAmount;

        return $this;
    }

    /**
     * Gets suggestMinBidAmount
     *
     * @return int
     */
    public function getSuggestMinBidAmount()
    {
        return $this->container['suggestMinBidAmount'];
    }

    /**
     * Sets suggestMinBidAmount
     *
     * @param int $suggestMinBidAmount suggestMinBidAmount
     *
     * @return $this
     */
    public function setSuggestMinBidAmount($suggestMinBidAmount)
    {
        $this->container['suggestMinBidAmount'] = $suggestMinBidAmount;

        return $this;
    }

    /**
     * Gets suggestMaxBidAmount
     *
     * @return int
     */
    public function getSuggestMaxBidAmount()
    {
        return $this->container['suggestMaxBidAmount'];
    }

    /**
     * Sets suggestMaxBidAmount
     *
     * @param int $suggestMaxBidAmount suggestMaxBidAmount
     *
     * @return $this
     */
    public function setSuggestMaxBidAmount($suggestMaxBidAmount)
    {
        $this->container['suggestMaxBidAmount'] = $suggestMaxBidAmount;

        return $this;
    }

    /**
     * Gets suggestBidContentOcpa
     *
     * @return string
     */
    public function getSuggestBidContentOcpa()
    {
        return $this->container['suggestBidContentOcpa'];
    }

    /**
     * Sets suggestBidContentOcpa
     *
     * @param string $suggestBidContentOcpa suggestBidContentOcpa
     *
     * @return $this
     */
    public function setSuggestBidContentOcpa($suggestBidContentOcpa)
    {
        $this->container['suggestBidContentOcpa'] = $suggestBidContentOcpa;

        return $this;
    }

    /**
     * Gets minUsersDaily
     *
     * @return int
     */
    public function getMinUsersDaily()
    {
        return $this->container['minUsersDaily'];
    }

    /**
     * Sets minUsersDaily
     *
     * @param int $minUsersDaily minUsersDaily
     *
     * @return $this
     */
    public function setMinUsersDaily($minUsersDaily)
    {
        $this->container['minUsersDaily'] = $minUsersDaily;

        return $this;
    }

    /**
     * Gets maxUsersDaily
     *
     * @return int
     */
    public function getMaxUsersDaily()
    {
        return $this->container['maxUsersDaily'];
    }

    /**
     * Sets maxUsersDaily
     *
     * @param int $maxUsersDaily maxUsersDaily
     *
     * @return $this
     */
    public function setMaxUsersDaily($maxUsersDaily)
    {
        $this->container['maxUsersDaily'] = $maxUsersDaily;

        return $this;
    }

    /**
     * Gets minExposureDaily
     *
     * @return int
     */
    public function getMinExposureDaily()
    {
        return $this->container['minExposureDaily'];
    }

    /**
     * Sets minExposureDaily
     *
     * @param int $minExposureDaily minExposureDaily
     *
     * @return $this
     */
    public function setMinExposureDaily($minExposureDaily)
    {
        $this->container['minExposureDaily'] = $minExposureDaily;

        return $this;
    }

    /**
     * Gets maxExposureDaily
     *
     * @return int
     */
    public function getMaxExposureDaily()
    {
        return $this->container['maxExposureDaily'];
    }

    /**
     * Sets maxExposureDaily
     *
     * @param int $maxExposureDaily maxExposureDaily
     *
     * @return $this
     */
    public function setMaxExposureDaily($maxExposureDaily)
    {
        $this->container['maxExposureDaily'] = $maxExposureDaily;

        return $this;
    }

    /**
     * Gets targetingStatus
     *
     * @return \TencentAds\Model\TargetingStatus
     */
    public function getTargetingStatus()
    {
        return $this->container['targetingStatus'];
    }

    /**
     * Sets targetingStatus
     *
     * @param \TencentAds\Model\TargetingStatus $targetingStatus targetingStatus
     *
     * @return $this
     */
    public function setTargetingStatus($targetingStatus)
    {
        $this->container['targetingStatus'] = $targetingStatus;

        return $this;
    }

    /**
     * Gets suggestTargeting
     *
     * @return string[]
     */
    public function getSuggestTargeting()
    {
        return $this->container['suggestTargeting'];
    }

    /**
     * Sets suggestTargeting
     *
     * @param string[] $suggestTargeting suggestTargeting
     *
     * @return $this
     */
    public function setSuggestTargeting($suggestTargeting)
    {
        $this->container['suggestTargeting'] = $suggestTargeting;

        return $this;
    }

    /**
     * Gets isRealExposureSupported
     *
     * @return bool
     */
    public function getIsRealExposureSupported()
    {
        return $this->container['isRealExposureSupported'];
    }

    /**
     * Sets isRealExposureSupported
     *
     * @param bool $isRealExposureSupported isRealExposureSupported
     *
     * @return $this
     */
    public function setIsRealExposureSupported($isRealExposureSupported)
    {
        $this->container['isRealExposureSupported'] = $isRealExposureSupported;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


