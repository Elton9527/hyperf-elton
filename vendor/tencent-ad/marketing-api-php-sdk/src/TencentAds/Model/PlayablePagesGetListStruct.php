<?php
/**
 * PlayablePagesGetListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * PlayablePagesGetListStruct Class Doc Comment
 *
 * @category Class
 * @description 返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlayablePagesGetListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayablePagesGetListStruct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'landingPageId' => 'string',
        'playablePageId' => 'string',
        'playablePageMaterialId' => 'string',
        'playablePageName' => 'string',
        'playablePageCdnBaseUrl' => 'string',
        'playablePageDirection' => '\TencentAds\Model\PlayablePageDirection',
        'auditStatus' => '\TencentAds\Model\PlayablePageAuditStatus',
        'auditMsg' => 'string',
        'createdTime' => 'int',
        'lastModifiedTime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'landingPageId' => null,
        'playablePageId' => null,
        'playablePageMaterialId' => null,
        'playablePageName' => null,
        'playablePageCdnBaseUrl' => null,
        'playablePageDirection' => null,
        'auditStatus' => null,
        'auditMsg' => null,
        'createdTime' => 'int64',
        'lastModifiedTime' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'landingPageId' => 'landing_page_id',
        'playablePageId' => 'playable_page_id',
        'playablePageMaterialId' => 'playable_page_material_id',
        'playablePageName' => 'playable_page_name',
        'playablePageCdnBaseUrl' => 'playable_page_cdn_base_url',
        'playablePageDirection' => 'playable_page_direction',
        'auditStatus' => 'audit_status',
        'auditMsg' => 'audit_msg',
        'createdTime' => 'created_time',
        'lastModifiedTime' => 'last_modified_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'landingPageId' => 'setLandingPageId',
        'playablePageId' => 'setPlayablePageId',
        'playablePageMaterialId' => 'setPlayablePageMaterialId',
        'playablePageName' => 'setPlayablePageName',
        'playablePageCdnBaseUrl' => 'setPlayablePageCdnBaseUrl',
        'playablePageDirection' => 'setPlayablePageDirection',
        'auditStatus' => 'setAuditStatus',
        'auditMsg' => 'setAuditMsg',
        'createdTime' => 'setCreatedTime',
        'lastModifiedTime' => 'setLastModifiedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'landingPageId' => 'getLandingPageId',
        'playablePageId' => 'getPlayablePageId',
        'playablePageMaterialId' => 'getPlayablePageMaterialId',
        'playablePageName' => 'getPlayablePageName',
        'playablePageCdnBaseUrl' => 'getPlayablePageCdnBaseUrl',
        'playablePageDirection' => 'getPlayablePageDirection',
        'auditStatus' => 'getAuditStatus',
        'auditMsg' => 'getAuditMsg',
        'createdTime' => 'getCreatedTime',
        'lastModifiedTime' => 'getLastModifiedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['landingPageId'] = isset($data['landingPageId']) ? $data['landingPageId'] : null;
        $this->container['playablePageId'] = isset($data['playablePageId']) ? $data['playablePageId'] : null;
        $this->container['playablePageMaterialId'] = isset($data['playablePageMaterialId']) ? $data['playablePageMaterialId'] : null;
        $this->container['playablePageName'] = isset($data['playablePageName']) ? $data['playablePageName'] : null;
        $this->container['playablePageCdnBaseUrl'] = isset($data['playablePageCdnBaseUrl']) ? $data['playablePageCdnBaseUrl'] : null;
        $this->container['playablePageDirection'] = isset($data['playablePageDirection']) ? $data['playablePageDirection'] : null;
        $this->container['auditStatus'] = isset($data['auditStatus']) ? $data['auditStatus'] : null;
        $this->container['auditMsg'] = isset($data['auditMsg']) ? $data['auditMsg'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['lastModifiedTime'] = isset($data['lastModifiedTime']) ? $data['lastModifiedTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets landingPageId
     *
     * @return string
     */
    public function getLandingPageId()
    {
        return $this->container['landingPageId'];
    }

    /**
     * Sets landingPageId
     *
     * @param string $landingPageId landingPageId
     *
     * @return $this
     */
    public function setLandingPageId($landingPageId)
    {
        $this->container['landingPageId'] = $landingPageId;

        return $this;
    }

    /**
     * Gets playablePageId
     *
     * @return string
     */
    public function getPlayablePageId()
    {
        return $this->container['playablePageId'];
    }

    /**
     * Sets playablePageId
     *
     * @param string $playablePageId playablePageId
     *
     * @return $this
     */
    public function setPlayablePageId($playablePageId)
    {
        $this->container['playablePageId'] = $playablePageId;

        return $this;
    }

    /**
     * Gets playablePageMaterialId
     *
     * @return string
     */
    public function getPlayablePageMaterialId()
    {
        return $this->container['playablePageMaterialId'];
    }

    /**
     * Sets playablePageMaterialId
     *
     * @param string $playablePageMaterialId playablePageMaterialId
     *
     * @return $this
     */
    public function setPlayablePageMaterialId($playablePageMaterialId)
    {
        $this->container['playablePageMaterialId'] = $playablePageMaterialId;

        return $this;
    }

    /**
     * Gets playablePageName
     *
     * @return string
     */
    public function getPlayablePageName()
    {
        return $this->container['playablePageName'];
    }

    /**
     * Sets playablePageName
     *
     * @param string $playablePageName playablePageName
     *
     * @return $this
     */
    public function setPlayablePageName($playablePageName)
    {
        $this->container['playablePageName'] = $playablePageName;

        return $this;
    }

    /**
     * Gets playablePageCdnBaseUrl
     *
     * @return string
     */
    public function getPlayablePageCdnBaseUrl()
    {
        return $this->container['playablePageCdnBaseUrl'];
    }

    /**
     * Sets playablePageCdnBaseUrl
     *
     * @param string $playablePageCdnBaseUrl playablePageCdnBaseUrl
     *
     * @return $this
     */
    public function setPlayablePageCdnBaseUrl($playablePageCdnBaseUrl)
    {
        $this->container['playablePageCdnBaseUrl'] = $playablePageCdnBaseUrl;

        return $this;
    }

    /**
     * Gets playablePageDirection
     *
     * @return \TencentAds\Model\PlayablePageDirection
     */
    public function getPlayablePageDirection()
    {
        return $this->container['playablePageDirection'];
    }

    /**
     * Sets playablePageDirection
     *
     * @param \TencentAds\Model\PlayablePageDirection $playablePageDirection playablePageDirection
     *
     * @return $this
     */
    public function setPlayablePageDirection($playablePageDirection)
    {
        $this->container['playablePageDirection'] = $playablePageDirection;

        return $this;
    }

    /**
     * Gets auditStatus
     *
     * @return \TencentAds\Model\PlayablePageAuditStatus
     */
    public function getAuditStatus()
    {
        return $this->container['auditStatus'];
    }

    /**
     * Sets auditStatus
     *
     * @param \TencentAds\Model\PlayablePageAuditStatus $auditStatus auditStatus
     *
     * @return $this
     */
    public function setAuditStatus($auditStatus)
    {
        $this->container['auditStatus'] = $auditStatus;

        return $this;
    }

    /**
     * Gets auditMsg
     *
     * @return string
     */
    public function getAuditMsg()
    {
        return $this->container['auditMsg'];
    }

    /**
     * Sets auditMsg
     *
     * @param string $auditMsg auditMsg
     *
     * @return $this
     */
    public function setAuditMsg($auditMsg)
    {
        $this->container['auditMsg'] = $auditMsg;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return int
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param int $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets lastModifiedTime
     *
     * @return int
     */
    public function getLastModifiedTime()
    {
        return $this->container['lastModifiedTime'];
    }

    /**
     * Sets lastModifiedTime
     *
     * @param int $lastModifiedTime lastModifiedTime
     *
     * @return $this
     */
    public function setLastModifiedTime($lastModifiedTime)
    {
        $this->container['lastModifiedTime'] = $lastModifiedTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


