<?php
/**
 * AggregationMatcher
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AggregationMatcher Class Doc Comment
 *
 * @category Class
 * @description 匹配规则组
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregationMatcher implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'aggregation_matcher';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aggregationType' => '\TencentAds\Model\AggregationType',
        'countType' => '\TencentAds\Model\CountType',
        'paramName' => 'string',
        'comparator' => '\TencentAds\Model\Comparator',
        'comparisonValue' => 'int',
        'comparisonMinValue' => 'int',
        'comparisonMaxValue' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aggregationType' => null,
        'countType' => null,
        'paramName' => null,
        'comparator' => null,
        'comparisonValue' => 'int64',
        'comparisonMinValue' => 'int64',
        'comparisonMaxValue' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aggregationType' => 'aggregation_type',
        'countType' => 'count_type',
        'paramName' => 'param_name',
        'comparator' => 'comparator',
        'comparisonValue' => 'comparison_value',
        'comparisonMinValue' => 'comparison_min_value',
        'comparisonMaxValue' => 'comparison_max_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aggregationType' => 'setAggregationType',
        'countType' => 'setCountType',
        'paramName' => 'setParamName',
        'comparator' => 'setComparator',
        'comparisonValue' => 'setComparisonValue',
        'comparisonMinValue' => 'setComparisonMinValue',
        'comparisonMaxValue' => 'setComparisonMaxValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aggregationType' => 'getAggregationType',
        'countType' => 'getCountType',
        'paramName' => 'getParamName',
        'comparator' => 'getComparator',
        'comparisonValue' => 'getComparisonValue',
        'comparisonMinValue' => 'getComparisonMinValue',
        'comparisonMaxValue' => 'getComparisonMaxValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aggregationType'] = isset($data['aggregationType']) ? $data['aggregationType'] : null;
        $this->container['countType'] = isset($data['countType']) ? $data['countType'] : null;
        $this->container['paramName'] = isset($data['paramName']) ? $data['paramName'] : null;
        $this->container['comparator'] = isset($data['comparator']) ? $data['comparator'] : null;
        $this->container['comparisonValue'] = isset($data['comparisonValue']) ? $data['comparisonValue'] : null;
        $this->container['comparisonMinValue'] = isset($data['comparisonMinValue']) ? $data['comparisonMinValue'] : null;
        $this->container['comparisonMaxValue'] = isset($data['comparisonMaxValue']) ? $data['comparisonMaxValue'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aggregationType
     *
     * @return \TencentAds\Model\AggregationType
     */
    public function getAggregationType()
    {
        return $this->container['aggregationType'];
    }

    /**
     * Sets aggregationType
     *
     * @param \TencentAds\Model\AggregationType $aggregationType aggregationType
     *
     * @return $this
     */
    public function setAggregationType($aggregationType)
    {
        $this->container['aggregationType'] = $aggregationType;

        return $this;
    }

    /**
     * Gets countType
     *
     * @return \TencentAds\Model\CountType
     */
    public function getCountType()
    {
        return $this->container['countType'];
    }

    /**
     * Sets countType
     *
     * @param \TencentAds\Model\CountType $countType countType
     *
     * @return $this
     */
    public function setCountType($countType)
    {
        $this->container['countType'] = $countType;

        return $this;
    }

    /**
     * Gets paramName
     *
     * @return string
     */
    public function getParamName()
    {
        return $this->container['paramName'];
    }

    /**
     * Sets paramName
     *
     * @param string $paramName paramName
     *
     * @return $this
     */
    public function setParamName($paramName)
    {
        $this->container['paramName'] = $paramName;

        return $this;
    }

    /**
     * Gets comparator
     *
     * @return \TencentAds\Model\Comparator
     */
    public function getComparator()
    {
        return $this->container['comparator'];
    }

    /**
     * Sets comparator
     *
     * @param \TencentAds\Model\Comparator $comparator comparator
     *
     * @return $this
     */
    public function setComparator($comparator)
    {
        $this->container['comparator'] = $comparator;

        return $this;
    }

    /**
     * Gets comparisonValue
     *
     * @return int
     */
    public function getComparisonValue()
    {
        return $this->container['comparisonValue'];
    }

    /**
     * Sets comparisonValue
     *
     * @param int $comparisonValue comparisonValue
     *
     * @return $this
     */
    public function setComparisonValue($comparisonValue)
    {
        $this->container['comparisonValue'] = $comparisonValue;

        return $this;
    }

    /**
     * Gets comparisonMinValue
     *
     * @return int
     */
    public function getComparisonMinValue()
    {
        return $this->container['comparisonMinValue'];
    }

    /**
     * Sets comparisonMinValue
     *
     * @param int $comparisonMinValue comparisonMinValue
     *
     * @return $this
     */
    public function setComparisonMinValue($comparisonMinValue)
    {
        $this->container['comparisonMinValue'] = $comparisonMinValue;

        return $this;
    }

    /**
     * Gets comparisonMaxValue
     *
     * @return int
     */
    public function getComparisonMaxValue()
    {
        return $this->container['comparisonMaxValue'];
    }

    /**
     * Sets comparisonMaxValue
     *
     * @param int $comparisonMaxValue comparisonMaxValue
     *
     * @return $this
     */
    public function setComparisonMaxValue($comparisonMaxValue)
    {
        $this->container['comparisonMaxValue'] = $comparisonMaxValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


