<?php
/**
 * PageElementsStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * PageElementsStruct Class Doc Comment
 *
 * @category Class
 * @description 组件素材内容，组件的同步顺序与原生页的展示顺序一致，即第一个同步组件为顶部展示元素
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PageElementsStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'page_elements_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'elementShelf' => '\TencentAds\Model\ElementShelf',
        'elementFloat' => '\TencentAds\Model\ElementFloat',
        'elementGoods' => '\TencentAds\Model\ElementGoods',
        'elementSwipe' => '\TencentAds\Model\ElementSwipe',
        'elementWebview' => '\TencentAds\Model\ElementWebview',
        'imageSpec' => '\TencentAds\Model\ElementImage',
        'videoSpec' => '\TencentAds\Model\ElementVideo',
        'textSpec' => '\TencentAds\Model\ElementText',
        'buttonSpec' => '\TencentAds\Model\ElementButtonRead',
        'formSpec' => '\TencentAds\Model\ElementForm',
        'elementType' => '\TencentAds\Model\PageElementsType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'elementShelf' => null,
        'elementFloat' => null,
        'elementGoods' => null,
        'elementSwipe' => null,
        'elementWebview' => null,
        'imageSpec' => null,
        'videoSpec' => null,
        'textSpec' => null,
        'buttonSpec' => null,
        'formSpec' => null,
        'elementType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'elementShelf' => 'element_shelf',
        'elementFloat' => 'element_float',
        'elementGoods' => 'element_goods',
        'elementSwipe' => 'element_swipe',
        'elementWebview' => 'element_webview',
        'imageSpec' => 'image_spec',
        'videoSpec' => 'video_spec',
        'textSpec' => 'text_spec',
        'buttonSpec' => 'button_spec',
        'formSpec' => 'form_spec',
        'elementType' => 'element_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'elementShelf' => 'setElementShelf',
        'elementFloat' => 'setElementFloat',
        'elementGoods' => 'setElementGoods',
        'elementSwipe' => 'setElementSwipe',
        'elementWebview' => 'setElementWebview',
        'imageSpec' => 'setImageSpec',
        'videoSpec' => 'setVideoSpec',
        'textSpec' => 'setTextSpec',
        'buttonSpec' => 'setButtonSpec',
        'formSpec' => 'setFormSpec',
        'elementType' => 'setElementType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'elementShelf' => 'getElementShelf',
        'elementFloat' => 'getElementFloat',
        'elementGoods' => 'getElementGoods',
        'elementSwipe' => 'getElementSwipe',
        'elementWebview' => 'getElementWebview',
        'imageSpec' => 'getImageSpec',
        'videoSpec' => 'getVideoSpec',
        'textSpec' => 'getTextSpec',
        'buttonSpec' => 'getButtonSpec',
        'formSpec' => 'getFormSpec',
        'elementType' => 'getElementType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['elementShelf'] = isset($data['elementShelf']) ? $data['elementShelf'] : null;
        $this->container['elementFloat'] = isset($data['elementFloat']) ? $data['elementFloat'] : null;
        $this->container['elementGoods'] = isset($data['elementGoods']) ? $data['elementGoods'] : null;
        $this->container['elementSwipe'] = isset($data['elementSwipe']) ? $data['elementSwipe'] : null;
        $this->container['elementWebview'] = isset($data['elementWebview']) ? $data['elementWebview'] : null;
        $this->container['imageSpec'] = isset($data['imageSpec']) ? $data['imageSpec'] : null;
        $this->container['videoSpec'] = isset($data['videoSpec']) ? $data['videoSpec'] : null;
        $this->container['textSpec'] = isset($data['textSpec']) ? $data['textSpec'] : null;
        $this->container['buttonSpec'] = isset($data['buttonSpec']) ? $data['buttonSpec'] : null;
        $this->container['formSpec'] = isset($data['formSpec']) ? $data['formSpec'] : null;
        $this->container['elementType'] = isset($data['elementType']) ? $data['elementType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets elementShelf
     *
     * @return \TencentAds\Model\ElementShelf
     */
    public function getElementShelf()
    {
        return $this->container['elementShelf'];
    }

    /**
     * Sets elementShelf
     *
     * @param \TencentAds\Model\ElementShelf $elementShelf elementShelf
     *
     * @return $this
     */
    public function setElementShelf($elementShelf)
    {
        $this->container['elementShelf'] = $elementShelf;

        return $this;
    }

    /**
     * Gets elementFloat
     *
     * @return \TencentAds\Model\ElementFloat
     */
    public function getElementFloat()
    {
        return $this->container['elementFloat'];
    }

    /**
     * Sets elementFloat
     *
     * @param \TencentAds\Model\ElementFloat $elementFloat elementFloat
     *
     * @return $this
     */
    public function setElementFloat($elementFloat)
    {
        $this->container['elementFloat'] = $elementFloat;

        return $this;
    }

    /**
     * Gets elementGoods
     *
     * @return \TencentAds\Model\ElementGoods
     */
    public function getElementGoods()
    {
        return $this->container['elementGoods'];
    }

    /**
     * Sets elementGoods
     *
     * @param \TencentAds\Model\ElementGoods $elementGoods elementGoods
     *
     * @return $this
     */
    public function setElementGoods($elementGoods)
    {
        $this->container['elementGoods'] = $elementGoods;

        return $this;
    }

    /**
     * Gets elementSwipe
     *
     * @return \TencentAds\Model\ElementSwipe
     */
    public function getElementSwipe()
    {
        return $this->container['elementSwipe'];
    }

    /**
     * Sets elementSwipe
     *
     * @param \TencentAds\Model\ElementSwipe $elementSwipe elementSwipe
     *
     * @return $this
     */
    public function setElementSwipe($elementSwipe)
    {
        $this->container['elementSwipe'] = $elementSwipe;

        return $this;
    }

    /**
     * Gets elementWebview
     *
     * @return \TencentAds\Model\ElementWebview
     */
    public function getElementWebview()
    {
        return $this->container['elementWebview'];
    }

    /**
     * Sets elementWebview
     *
     * @param \TencentAds\Model\ElementWebview $elementWebview elementWebview
     *
     * @return $this
     */
    public function setElementWebview($elementWebview)
    {
        $this->container['elementWebview'] = $elementWebview;

        return $this;
    }

    /**
     * Gets imageSpec
     *
     * @return \TencentAds\Model\ElementImage
     */
    public function getImageSpec()
    {
        return $this->container['imageSpec'];
    }

    /**
     * Sets imageSpec
     *
     * @param \TencentAds\Model\ElementImage $imageSpec imageSpec
     *
     * @return $this
     */
    public function setImageSpec($imageSpec)
    {
        $this->container['imageSpec'] = $imageSpec;

        return $this;
    }

    /**
     * Gets videoSpec
     *
     * @return \TencentAds\Model\ElementVideo
     */
    public function getVideoSpec()
    {
        return $this->container['videoSpec'];
    }

    /**
     * Sets videoSpec
     *
     * @param \TencentAds\Model\ElementVideo $videoSpec videoSpec
     *
     * @return $this
     */
    public function setVideoSpec($videoSpec)
    {
        $this->container['videoSpec'] = $videoSpec;

        return $this;
    }

    /**
     * Gets textSpec
     *
     * @return \TencentAds\Model\ElementText
     */
    public function getTextSpec()
    {
        return $this->container['textSpec'];
    }

    /**
     * Sets textSpec
     *
     * @param \TencentAds\Model\ElementText $textSpec textSpec
     *
     * @return $this
     */
    public function setTextSpec($textSpec)
    {
        $this->container['textSpec'] = $textSpec;

        return $this;
    }

    /**
     * Gets buttonSpec
     *
     * @return \TencentAds\Model\ElementButtonRead
     */
    public function getButtonSpec()
    {
        return $this->container['buttonSpec'];
    }

    /**
     * Sets buttonSpec
     *
     * @param \TencentAds\Model\ElementButtonRead $buttonSpec buttonSpec
     *
     * @return $this
     */
    public function setButtonSpec($buttonSpec)
    {
        $this->container['buttonSpec'] = $buttonSpec;

        return $this;
    }

    /**
     * Gets formSpec
     *
     * @return \TencentAds\Model\ElementForm
     */
    public function getFormSpec()
    {
        return $this->container['formSpec'];
    }

    /**
     * Sets formSpec
     *
     * @param \TencentAds\Model\ElementForm $formSpec formSpec
     *
     * @return $this
     */
    public function setFormSpec($formSpec)
    {
        $this->container['formSpec'] = $formSpec;

        return $this;
    }

    /**
     * Gets elementType
     *
     * @return \TencentAds\Model\PageElementsType
     */
    public function getElementType()
    {
        return $this->container['elementType'];
    }

    /**
     * Sets elementType
     *
     * @param \TencentAds\Model\PageElementsType $elementType elementType
     *
     * @return $this
     */
    public function setElementType($elementType)
    {
        $this->container['elementType'] = $elementType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


