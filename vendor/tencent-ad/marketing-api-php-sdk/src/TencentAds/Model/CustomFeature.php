<?php
/**
 * CustomFeature
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CustomFeature Class Doc Comment
 *
 * @category Class
 * @description custom_feature_class返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomFeature implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'custom_feature';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'featureId' => 'int',
        'name' => 'string',
        'description' => 'string',
        'featureClassId' => 'int',
        'featureSpec' => '\TencentAds\Model\FeatureSpec',
        'isSupportedTimeWindow' => 'bool',
        'timeWindow' => 'int[]',
        'createdTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'featureId' => 'int64',
        'name' => null,
        'description' => null,
        'featureClassId' => 'int64',
        'featureSpec' => null,
        'isSupportedTimeWindow' => null,
        'timeWindow' => 'int64',
        'createdTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'featureId' => 'feature_id',
        'name' => 'name',
        'description' => 'description',
        'featureClassId' => 'feature_class_id',
        'featureSpec' => 'feature_spec',
        'isSupportedTimeWindow' => 'is_supported_time_window',
        'timeWindow' => 'time_window',
        'createdTime' => 'created_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'featureId' => 'setFeatureId',
        'name' => 'setName',
        'description' => 'setDescription',
        'featureClassId' => 'setFeatureClassId',
        'featureSpec' => 'setFeatureSpec',
        'isSupportedTimeWindow' => 'setIsSupportedTimeWindow',
        'timeWindow' => 'setTimeWindow',
        'createdTime' => 'setCreatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'featureId' => 'getFeatureId',
        'name' => 'getName',
        'description' => 'getDescription',
        'featureClassId' => 'getFeatureClassId',
        'featureSpec' => 'getFeatureSpec',
        'isSupportedTimeWindow' => 'getIsSupportedTimeWindow',
        'timeWindow' => 'getTimeWindow',
        'createdTime' => 'getCreatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['featureId'] = isset($data['featureId']) ? $data['featureId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['featureClassId'] = isset($data['featureClassId']) ? $data['featureClassId'] : null;
        $this->container['featureSpec'] = isset($data['featureSpec']) ? $data['featureSpec'] : null;
        $this->container['isSupportedTimeWindow'] = isset($data['isSupportedTimeWindow']) ? $data['isSupportedTimeWindow'] : null;
        $this->container['timeWindow'] = isset($data['timeWindow']) ? $data['timeWindow'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets featureId
     *
     * @return int
     */
    public function getFeatureId()
    {
        return $this->container['featureId'];
    }

    /**
     * Sets featureId
     *
     * @param int $featureId featureId
     *
     * @return $this
     */
    public function setFeatureId($featureId)
    {
        $this->container['featureId'] = $featureId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets featureClassId
     *
     * @return int
     */
    public function getFeatureClassId()
    {
        return $this->container['featureClassId'];
    }

    /**
     * Sets featureClassId
     *
     * @param int $featureClassId featureClassId
     *
     * @return $this
     */
    public function setFeatureClassId($featureClassId)
    {
        $this->container['featureClassId'] = $featureClassId;

        return $this;
    }

    /**
     * Gets featureSpec
     *
     * @return \TencentAds\Model\FeatureSpec
     */
    public function getFeatureSpec()
    {
        return $this->container['featureSpec'];
    }

    /**
     * Sets featureSpec
     *
     * @param \TencentAds\Model\FeatureSpec $featureSpec featureSpec
     *
     * @return $this
     */
    public function setFeatureSpec($featureSpec)
    {
        $this->container['featureSpec'] = $featureSpec;

        return $this;
    }

    /**
     * Gets isSupportedTimeWindow
     *
     * @return bool
     */
    public function getIsSupportedTimeWindow()
    {
        return $this->container['isSupportedTimeWindow'];
    }

    /**
     * Sets isSupportedTimeWindow
     *
     * @param bool $isSupportedTimeWindow isSupportedTimeWindow
     *
     * @return $this
     */
    public function setIsSupportedTimeWindow($isSupportedTimeWindow)
    {
        $this->container['isSupportedTimeWindow'] = $isSupportedTimeWindow;

        return $this;
    }

    /**
     * Gets timeWindow
     *
     * @return int[]
     */
    public function getTimeWindow()
    {
        return $this->container['timeWindow'];
    }

    /**
     * Sets timeWindow
     *
     * @param int[] $timeWindow timeWindow
     *
     * @return $this
     */
    public function setTimeWindow($timeWindow)
    {
        $this->container['timeWindow'] = $timeWindow;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param string $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


