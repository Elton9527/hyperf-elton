<?php
/**
 * ProductCatalogsAddRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * ProductCatalogsAddRequest Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductCatalogsAddRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductCatalogsAddRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accountId' => 'int',
        'catalogName' => 'string',
        'catalogScaleType' => '\TencentAds\Model\CatalogScale',
        'catalogType' => '\TencentAds\Model\CatalogType',
        'industryType' => '\TencentAds\Model\CatalogIndustry'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accountId' => 'int64',
        'catalogName' => null,
        'catalogScaleType' => null,
        'catalogType' => null,
        'industryType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountId' => 'account_id',
        'catalogName' => 'catalog_name',
        'catalogScaleType' => 'catalog_scale_type',
        'catalogType' => 'catalog_type',
        'industryType' => 'industry_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountId' => 'setAccountId',
        'catalogName' => 'setCatalogName',
        'catalogScaleType' => 'setCatalogScaleType',
        'catalogType' => 'setCatalogType',
        'industryType' => 'setIndustryType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountId' => 'getAccountId',
        'catalogName' => 'getCatalogName',
        'catalogScaleType' => 'getCatalogScaleType',
        'catalogType' => 'getCatalogType',
        'industryType' => 'getIndustryType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['catalogName'] = isset($data['catalogName']) ? $data['catalogName'] : null;
        $this->container['catalogScaleType'] = isset($data['catalogScaleType']) ? $data['catalogScaleType'] : null;
        $this->container['catalogType'] = isset($data['catalogType']) ? $data['catalogType'] : null;
        $this->container['industryType'] = isset($data['industryType']) ? $data['industryType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets catalogName
     *
     * @return string
     */
    public function getCatalogName()
    {
        return $this->container['catalogName'];
    }

    /**
     * Sets catalogName
     *
     * @param string $catalogName catalogName
     *
     * @return $this
     */
    public function setCatalogName($catalogName)
    {
        $this->container['catalogName'] = $catalogName;

        return $this;
    }

    /**
     * Gets catalogScaleType
     *
     * @return \TencentAds\Model\CatalogScale
     */
    public function getCatalogScaleType()
    {
        return $this->container['catalogScaleType'];
    }

    /**
     * Sets catalogScaleType
     *
     * @param \TencentAds\Model\CatalogScale $catalogScaleType catalogScaleType
     *
     * @return $this
     */
    public function setCatalogScaleType($catalogScaleType)
    {
        $this->container['catalogScaleType'] = $catalogScaleType;

        return $this;
    }

    /**
     * Gets catalogType
     *
     * @return \TencentAds\Model\CatalogType
     */
    public function getCatalogType()
    {
        return $this->container['catalogType'];
    }

    /**
     * Sets catalogType
     *
     * @param \TencentAds\Model\CatalogType $catalogType catalogType
     *
     * @return $this
     */
    public function setCatalogType($catalogType)
    {
        $this->container['catalogType'] = $catalogType;

        return $this;
    }

    /**
     * Gets industryType
     *
     * @return \TencentAds\Model\CatalogIndustry
     */
    public function getIndustryType()
    {
        return $this->container['industryType'];
    }

    /**
     * Sets industryType
     *
     * @param \TencentAds\Model\CatalogIndustry $industryType industryType
     *
     * @return $this
     */
    public function setIndustryType($industryType)
    {
        $this->container['industryType'] = $industryType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


