<?php
/**
 * MiniprogramAmount
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * MiniprogramAmount Class Doc Comment
 *
 * @category Class
 * @description 小程序启动金更多信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MiniprogramAmount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'miniprogram_amount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receivedAmount' => 'int',
        'usedAmount' => 'int',
        'lockedAmount' => 'int',
        'repaidAmount' => 'int',
        'needRepayAmount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receivedAmount' => 'int64',
        'usedAmount' => 'int64',
        'lockedAmount' => 'int64',
        'repaidAmount' => 'int64',
        'needRepayAmount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receivedAmount' => 'received_amount',
        'usedAmount' => 'used_amount',
        'lockedAmount' => 'locked_amount',
        'repaidAmount' => 'repaid_amount',
        'needRepayAmount' => 'need_repay_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receivedAmount' => 'setReceivedAmount',
        'usedAmount' => 'setUsedAmount',
        'lockedAmount' => 'setLockedAmount',
        'repaidAmount' => 'setRepaidAmount',
        'needRepayAmount' => 'setNeedRepayAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receivedAmount' => 'getReceivedAmount',
        'usedAmount' => 'getUsedAmount',
        'lockedAmount' => 'getLockedAmount',
        'repaidAmount' => 'getRepaidAmount',
        'needRepayAmount' => 'getNeedRepayAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receivedAmount'] = isset($data['receivedAmount']) ? $data['receivedAmount'] : null;
        $this->container['usedAmount'] = isset($data['usedAmount']) ? $data['usedAmount'] : null;
        $this->container['lockedAmount'] = isset($data['lockedAmount']) ? $data['lockedAmount'] : null;
        $this->container['repaidAmount'] = isset($data['repaidAmount']) ? $data['repaidAmount'] : null;
        $this->container['needRepayAmount'] = isset($data['needRepayAmount']) ? $data['needRepayAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receivedAmount
     *
     * @return int
     */
    public function getReceivedAmount()
    {
        return $this->container['receivedAmount'];
    }

    /**
     * Sets receivedAmount
     *
     * @param int $receivedAmount receivedAmount
     *
     * @return $this
     */
    public function setReceivedAmount($receivedAmount)
    {
        $this->container['receivedAmount'] = $receivedAmount;

        return $this;
    }

    /**
     * Gets usedAmount
     *
     * @return int
     */
    public function getUsedAmount()
    {
        return $this->container['usedAmount'];
    }

    /**
     * Sets usedAmount
     *
     * @param int $usedAmount usedAmount
     *
     * @return $this
     */
    public function setUsedAmount($usedAmount)
    {
        $this->container['usedAmount'] = $usedAmount;

        return $this;
    }

    /**
     * Gets lockedAmount
     *
     * @return int
     */
    public function getLockedAmount()
    {
        return $this->container['lockedAmount'];
    }

    /**
     * Sets lockedAmount
     *
     * @param int $lockedAmount lockedAmount
     *
     * @return $this
     */
    public function setLockedAmount($lockedAmount)
    {
        $this->container['lockedAmount'] = $lockedAmount;

        return $this;
    }

    /**
     * Gets repaidAmount
     *
     * @return int
     */
    public function getRepaidAmount()
    {
        return $this->container['repaidAmount'];
    }

    /**
     * Sets repaidAmount
     *
     * @param int $repaidAmount repaidAmount
     *
     * @return $this
     */
    public function setRepaidAmount($repaidAmount)
    {
        $this->container['repaidAmount'] = $repaidAmount;

        return $this;
    }

    /**
     * Gets needRepayAmount
     *
     * @return int
     */
    public function getNeedRepayAmount()
    {
        return $this->container['needRepayAmount'];
    }

    /**
     * Sets needRepayAmount
     *
     * @param int $needRepayAmount needRepayAmount
     *
     * @return $this
     */
    public function setNeedRepayAmount($needRepayAmount)
    {
        $this->container['needRepayAmount'] = $needRepayAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


