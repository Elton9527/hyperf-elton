<?php
/**
 * CustomTagFile
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * CustomTagFile Class Doc Comment
 *
 * @category Class
 * @description custom_tag_file返回结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomTagFile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'custom_tag_file';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tagId' => 'int',
        'customTagFileId' => 'int',
        'name' => 'string',
        'userIdType' => '\TencentAds\Model\UserIdType',
        'operationType' => '\TencentAds\Model\OperationType',
        'openAppId' => 'string',
        'processStatus' => '\TencentAds\Model\FileProcessStatus',
        'processCode' => 'int',
        'errorMessage' => 'string',
        'lineCount' => 'int',
        'validLineCount' => 'int',
        'userCount' => 'int',
        'createdTime' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tagId' => 'int64',
        'customTagFileId' => 'int64',
        'name' => null,
        'userIdType' => null,
        'operationType' => null,
        'openAppId' => null,
        'processStatus' => null,
        'processCode' => 'int64',
        'errorMessage' => null,
        'lineCount' => 'int64',
        'validLineCount' => 'int64',
        'userCount' => 'int64',
        'createdTime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tagId' => 'tag_id',
        'customTagFileId' => 'custom_tag_file_id',
        'name' => 'name',
        'userIdType' => 'user_id_type',
        'operationType' => 'operation_type',
        'openAppId' => 'open_app_id',
        'processStatus' => 'process_status',
        'processCode' => 'process_code',
        'errorMessage' => 'error_message',
        'lineCount' => 'line_count',
        'validLineCount' => 'valid_line_count',
        'userCount' => 'user_count',
        'createdTime' => 'created_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tagId' => 'setTagId',
        'customTagFileId' => 'setCustomTagFileId',
        'name' => 'setName',
        'userIdType' => 'setUserIdType',
        'operationType' => 'setOperationType',
        'openAppId' => 'setOpenAppId',
        'processStatus' => 'setProcessStatus',
        'processCode' => 'setProcessCode',
        'errorMessage' => 'setErrorMessage',
        'lineCount' => 'setLineCount',
        'validLineCount' => 'setValidLineCount',
        'userCount' => 'setUserCount',
        'createdTime' => 'setCreatedTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tagId' => 'getTagId',
        'customTagFileId' => 'getCustomTagFileId',
        'name' => 'getName',
        'userIdType' => 'getUserIdType',
        'operationType' => 'getOperationType',
        'openAppId' => 'getOpenAppId',
        'processStatus' => 'getProcessStatus',
        'processCode' => 'getProcessCode',
        'errorMessage' => 'getErrorMessage',
        'lineCount' => 'getLineCount',
        'validLineCount' => 'getValidLineCount',
        'userCount' => 'getUserCount',
        'createdTime' => 'getCreatedTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tagId'] = isset($data['tagId']) ? $data['tagId'] : null;
        $this->container['customTagFileId'] = isset($data['customTagFileId']) ? $data['customTagFileId'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['userIdType'] = isset($data['userIdType']) ? $data['userIdType'] : null;
        $this->container['operationType'] = isset($data['operationType']) ? $data['operationType'] : null;
        $this->container['openAppId'] = isset($data['openAppId']) ? $data['openAppId'] : null;
        $this->container['processStatus'] = isset($data['processStatus']) ? $data['processStatus'] : null;
        $this->container['processCode'] = isset($data['processCode']) ? $data['processCode'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['lineCount'] = isset($data['lineCount']) ? $data['lineCount'] : null;
        $this->container['validLineCount'] = isset($data['validLineCount']) ? $data['validLineCount'] : null;
        $this->container['userCount'] = isset($data['userCount']) ? $data['userCount'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tagId
     *
     * @return int
     */
    public function getTagId()
    {
        return $this->container['tagId'];
    }

    /**
     * Sets tagId
     *
     * @param int $tagId tagId
     *
     * @return $this
     */
    public function setTagId($tagId)
    {
        $this->container['tagId'] = $tagId;

        return $this;
    }

    /**
     * Gets customTagFileId
     *
     * @return int
     */
    public function getCustomTagFileId()
    {
        return $this->container['customTagFileId'];
    }

    /**
     * Sets customTagFileId
     *
     * @param int $customTagFileId customTagFileId
     *
     * @return $this
     */
    public function setCustomTagFileId($customTagFileId)
    {
        $this->container['customTagFileId'] = $customTagFileId;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets userIdType
     *
     * @return \TencentAds\Model\UserIdType
     */
    public function getUserIdType()
    {
        return $this->container['userIdType'];
    }

    /**
     * Sets userIdType
     *
     * @param \TencentAds\Model\UserIdType $userIdType userIdType
     *
     * @return $this
     */
    public function setUserIdType($userIdType)
    {
        $this->container['userIdType'] = $userIdType;

        return $this;
    }

    /**
     * Gets operationType
     *
     * @return \TencentAds\Model\OperationType
     */
    public function getOperationType()
    {
        return $this->container['operationType'];
    }

    /**
     * Sets operationType
     *
     * @param \TencentAds\Model\OperationType $operationType operationType
     *
     * @return $this
     */
    public function setOperationType($operationType)
    {
        $this->container['operationType'] = $operationType;

        return $this;
    }

    /**
     * Gets openAppId
     *
     * @return string
     */
    public function getOpenAppId()
    {
        return $this->container['openAppId'];
    }

    /**
     * Sets openAppId
     *
     * @param string $openAppId openAppId
     *
     * @return $this
     */
    public function setOpenAppId($openAppId)
    {
        $this->container['openAppId'] = $openAppId;

        return $this;
    }

    /**
     * Gets processStatus
     *
     * @return \TencentAds\Model\FileProcessStatus
     */
    public function getProcessStatus()
    {
        return $this->container['processStatus'];
    }

    /**
     * Sets processStatus
     *
     * @param \TencentAds\Model\FileProcessStatus $processStatus processStatus
     *
     * @return $this
     */
    public function setProcessStatus($processStatus)
    {
        $this->container['processStatus'] = $processStatus;

        return $this;
    }

    /**
     * Gets processCode
     *
     * @return int
     */
    public function getProcessCode()
    {
        return $this->container['processCode'];
    }

    /**
     * Sets processCode
     *
     * @param int $processCode processCode
     *
     * @return $this
     */
    public function setProcessCode($processCode)
    {
        $this->container['processCode'] = $processCode;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage errorMessage
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets lineCount
     *
     * @return int
     */
    public function getLineCount()
    {
        return $this->container['lineCount'];
    }

    /**
     * Sets lineCount
     *
     * @param int $lineCount lineCount
     *
     * @return $this
     */
    public function setLineCount($lineCount)
    {
        $this->container['lineCount'] = $lineCount;

        return $this;
    }

    /**
     * Gets validLineCount
     *
     * @return int
     */
    public function getValidLineCount()
    {
        return $this->container['validLineCount'];
    }

    /**
     * Sets validLineCount
     *
     * @param int $validLineCount validLineCount
     *
     * @return $this
     */
    public function setValidLineCount($validLineCount)
    {
        $this->container['validLineCount'] = $validLineCount;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount userCount
     *
     * @return $this
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return string
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param string $createdTime createdTime
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


