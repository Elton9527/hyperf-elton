<?php
/**
 * WechatAdvertiserLocalBusinessGetResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * WechatAdvertiserLocalBusinessGetResponseData Class Doc Comment
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WechatAdvertiserLocalBusinessGetResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WechatAdvertiserLocalBusinessGetResponseData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'headImageUrl' => 'string',
        'name' => 'string',
        'description' => 'string',
        'contactPerson' => 'string',
        'contactPersonMobile' => 'string',
        'contactPersonCardId' => 'string',
        'contactPersonTele' => 'string',
        'corporation' => 'string',
        'corporationLicence' => 'string',
        'businessContent' => 'string',
        'industryId' => 'int',
        'accountId' => 'int',
        'businessId' => 'string',
        'rejectMessage' => 'string',
        'reviewStatus' => '\TencentAds\Model\WechatLocalBusinessReviewStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'headImageUrl' => null,
        'name' => null,
        'description' => null,
        'contactPerson' => null,
        'contactPersonMobile' => null,
        'contactPersonCardId' => null,
        'contactPersonTele' => null,
        'corporation' => null,
        'corporationLicence' => null,
        'businessContent' => null,
        'industryId' => 'int64',
        'accountId' => 'int64',
        'businessId' => null,
        'rejectMessage' => null,
        'reviewStatus' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'headImageUrl' => 'head_image_url',
        'name' => 'name',
        'description' => 'description',
        'contactPerson' => 'contact_person',
        'contactPersonMobile' => 'contact_person_mobile',
        'contactPersonCardId' => 'contact_person_card_id',
        'contactPersonTele' => 'contact_person_tele',
        'corporation' => 'corporation',
        'corporationLicence' => 'corporation_licence',
        'businessContent' => 'business_content',
        'industryId' => 'industry_id',
        'accountId' => 'account_id',
        'businessId' => 'business_id',
        'rejectMessage' => 'reject_message',
        'reviewStatus' => 'review_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'headImageUrl' => 'setHeadImageUrl',
        'name' => 'setName',
        'description' => 'setDescription',
        'contactPerson' => 'setContactPerson',
        'contactPersonMobile' => 'setContactPersonMobile',
        'contactPersonCardId' => 'setContactPersonCardId',
        'contactPersonTele' => 'setContactPersonTele',
        'corporation' => 'setCorporation',
        'corporationLicence' => 'setCorporationLicence',
        'businessContent' => 'setBusinessContent',
        'industryId' => 'setIndustryId',
        'accountId' => 'setAccountId',
        'businessId' => 'setBusinessId',
        'rejectMessage' => 'setRejectMessage',
        'reviewStatus' => 'setReviewStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'headImageUrl' => 'getHeadImageUrl',
        'name' => 'getName',
        'description' => 'getDescription',
        'contactPerson' => 'getContactPerson',
        'contactPersonMobile' => 'getContactPersonMobile',
        'contactPersonCardId' => 'getContactPersonCardId',
        'contactPersonTele' => 'getContactPersonTele',
        'corporation' => 'getCorporation',
        'corporationLicence' => 'getCorporationLicence',
        'businessContent' => 'getBusinessContent',
        'industryId' => 'getIndustryId',
        'accountId' => 'getAccountId',
        'businessId' => 'getBusinessId',
        'rejectMessage' => 'getRejectMessage',
        'reviewStatus' => 'getReviewStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['headImageUrl'] = isset($data['headImageUrl']) ? $data['headImageUrl'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['contactPerson'] = isset($data['contactPerson']) ? $data['contactPerson'] : null;
        $this->container['contactPersonMobile'] = isset($data['contactPersonMobile']) ? $data['contactPersonMobile'] : null;
        $this->container['contactPersonCardId'] = isset($data['contactPersonCardId']) ? $data['contactPersonCardId'] : null;
        $this->container['contactPersonTele'] = isset($data['contactPersonTele']) ? $data['contactPersonTele'] : null;
        $this->container['corporation'] = isset($data['corporation']) ? $data['corporation'] : null;
        $this->container['corporationLicence'] = isset($data['corporationLicence']) ? $data['corporationLicence'] : null;
        $this->container['businessContent'] = isset($data['businessContent']) ? $data['businessContent'] : null;
        $this->container['industryId'] = isset($data['industryId']) ? $data['industryId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['businessId'] = isset($data['businessId']) ? $data['businessId'] : null;
        $this->container['rejectMessage'] = isset($data['rejectMessage']) ? $data['rejectMessage'] : null;
        $this->container['reviewStatus'] = isset($data['reviewStatus']) ? $data['reviewStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets headImageUrl
     *
     * @return string
     */
    public function getHeadImageUrl()
    {
        return $this->container['headImageUrl'];
    }

    /**
     * Sets headImageUrl
     *
     * @param string $headImageUrl headImageUrl
     *
     * @return $this
     */
    public function setHeadImageUrl($headImageUrl)
    {
        $this->container['headImageUrl'] = $headImageUrl;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets contactPerson
     *
     * @return string
     */
    public function getContactPerson()
    {
        return $this->container['contactPerson'];
    }

    /**
     * Sets contactPerson
     *
     * @param string $contactPerson contactPerson
     *
     * @return $this
     */
    public function setContactPerson($contactPerson)
    {
        $this->container['contactPerson'] = $contactPerson;

        return $this;
    }

    /**
     * Gets contactPersonMobile
     *
     * @return string
     */
    public function getContactPersonMobile()
    {
        return $this->container['contactPersonMobile'];
    }

    /**
     * Sets contactPersonMobile
     *
     * @param string $contactPersonMobile contactPersonMobile
     *
     * @return $this
     */
    public function setContactPersonMobile($contactPersonMobile)
    {
        $this->container['contactPersonMobile'] = $contactPersonMobile;

        return $this;
    }

    /**
     * Gets contactPersonCardId
     *
     * @return string
     */
    public function getContactPersonCardId()
    {
        return $this->container['contactPersonCardId'];
    }

    /**
     * Sets contactPersonCardId
     *
     * @param string $contactPersonCardId contactPersonCardId
     *
     * @return $this
     */
    public function setContactPersonCardId($contactPersonCardId)
    {
        $this->container['contactPersonCardId'] = $contactPersonCardId;

        return $this;
    }

    /**
     * Gets contactPersonTele
     *
     * @return string
     */
    public function getContactPersonTele()
    {
        return $this->container['contactPersonTele'];
    }

    /**
     * Sets contactPersonTele
     *
     * @param string $contactPersonTele contactPersonTele
     *
     * @return $this
     */
    public function setContactPersonTele($contactPersonTele)
    {
        $this->container['contactPersonTele'] = $contactPersonTele;

        return $this;
    }

    /**
     * Gets corporation
     *
     * @return string
     */
    public function getCorporation()
    {
        return $this->container['corporation'];
    }

    /**
     * Sets corporation
     *
     * @param string $corporation corporation
     *
     * @return $this
     */
    public function setCorporation($corporation)
    {
        $this->container['corporation'] = $corporation;

        return $this;
    }

    /**
     * Gets corporationLicence
     *
     * @return string
     */
    public function getCorporationLicence()
    {
        return $this->container['corporationLicence'];
    }

    /**
     * Sets corporationLicence
     *
     * @param string $corporationLicence corporationLicence
     *
     * @return $this
     */
    public function setCorporationLicence($corporationLicence)
    {
        $this->container['corporationLicence'] = $corporationLicence;

        return $this;
    }

    /**
     * Gets businessContent
     *
     * @return string
     */
    public function getBusinessContent()
    {
        return $this->container['businessContent'];
    }

    /**
     * Sets businessContent
     *
     * @param string $businessContent businessContent
     *
     * @return $this
     */
    public function setBusinessContent($businessContent)
    {
        $this->container['businessContent'] = $businessContent;

        return $this;
    }

    /**
     * Gets industryId
     *
     * @return int
     */
    public function getIndustryId()
    {
        return $this->container['industryId'];
    }

    /**
     * Sets industryId
     *
     * @param int $industryId industryId
     *
     * @return $this
     */
    public function setIndustryId($industryId)
    {
        $this->container['industryId'] = $industryId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets businessId
     *
     * @return string
     */
    public function getBusinessId()
    {
        return $this->container['businessId'];
    }

    /**
     * Sets businessId
     *
     * @param string $businessId businessId
     *
     * @return $this
     */
    public function setBusinessId($businessId)
    {
        $this->container['businessId'] = $businessId;

        return $this;
    }

    /**
     * Gets rejectMessage
     *
     * @return string
     */
    public function getRejectMessage()
    {
        return $this->container['rejectMessage'];
    }

    /**
     * Sets rejectMessage
     *
     * @param string $rejectMessage rejectMessage
     *
     * @return $this
     */
    public function setRejectMessage($rejectMessage)
    {
        $this->container['rejectMessage'] = $rejectMessage;

        return $this;
    }

    /**
     * Gets reviewStatus
     *
     * @return \TencentAds\Model\WechatLocalBusinessReviewStatus
     */
    public function getReviewStatus()
    {
        return $this->container['reviewStatus'];
    }

    /**
     * Sets reviewStatus
     *
     * @param \TencentAds\Model\WechatLocalBusinessReviewStatus $reviewStatus reviewStatus
     *
     * @return $this
     */
    public function setReviewStatus($reviewStatus)
    {
        $this->container['reviewStatus'] = $reviewStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


