<?php
/**
 * PoiRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * PoiRule Class Doc Comment
 *
 * @category Class
 * @description POI规则
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PoiRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'poi_rule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'regionId' => 'int[]',
        'poiCategoryId' => 'int[]',
        'dateRange' => '\TencentAds\Model\DateRange',
        'dayOfWeek' => 'string[]',
        'frequency' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'regionId' => 'int64',
        'poiCategoryId' => 'int64',
        'dateRange' => null,
        'dayOfWeek' => null,
        'frequency' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'regionId' => 'region_id',
        'poiCategoryId' => 'poi_category_id',
        'dateRange' => 'date_range',
        'dayOfWeek' => 'day_of_week',
        'frequency' => 'frequency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'regionId' => 'setRegionId',
        'poiCategoryId' => 'setPoiCategoryId',
        'dateRange' => 'setDateRange',
        'dayOfWeek' => 'setDayOfWeek',
        'frequency' => 'setFrequency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'regionId' => 'getRegionId',
        'poiCategoryId' => 'getPoiCategoryId',
        'dateRange' => 'getDateRange',
        'dayOfWeek' => 'getDayOfWeek',
        'frequency' => 'getFrequency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['regionId'] = isset($data['regionId']) ? $data['regionId'] : null;
        $this->container['poiCategoryId'] = isset($data['poiCategoryId']) ? $data['poiCategoryId'] : null;
        $this->container['dateRange'] = isset($data['dateRange']) ? $data['dateRange'] : null;
        $this->container['dayOfWeek'] = isset($data['dayOfWeek']) ? $data['dayOfWeek'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets regionId
     *
     * @return int[]
     */
    public function getRegionId()
    {
        return $this->container['regionId'];
    }

    /**
     * Sets regionId
     *
     * @param int[] $regionId regionId
     *
     * @return $this
     */
    public function setRegionId($regionId)
    {
        $this->container['regionId'] = $regionId;

        return $this;
    }

    /**
     * Gets poiCategoryId
     *
     * @return int[]
     */
    public function getPoiCategoryId()
    {
        return $this->container['poiCategoryId'];
    }

    /**
     * Sets poiCategoryId
     *
     * @param int[] $poiCategoryId poiCategoryId
     *
     * @return $this
     */
    public function setPoiCategoryId($poiCategoryId)
    {
        $this->container['poiCategoryId'] = $poiCategoryId;

        return $this;
    }

    /**
     * Gets dateRange
     *
     * @return \TencentAds\Model\DateRange
     */
    public function getDateRange()
    {
        return $this->container['dateRange'];
    }

    /**
     * Sets dateRange
     *
     * @param \TencentAds\Model\DateRange $dateRange dateRange
     *
     * @return $this
     */
    public function setDateRange($dateRange)
    {
        $this->container['dateRange'] = $dateRange;

        return $this;
    }

    /**
     * Gets dayOfWeek
     *
     * @return string[]
     */
    public function getDayOfWeek()
    {
        return $this->container['dayOfWeek'];
    }

    /**
     * Sets dayOfWeek
     *
     * @param string[] $dayOfWeek dayOfWeek
     *
     * @return $this
     */
    public function setDayOfWeek($dayOfWeek)
    {
        $this->container['dayOfWeek'] = $dayOfWeek;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return int
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param int $frequency frequency
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


