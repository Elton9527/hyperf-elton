<?php
/**
 * AudienceReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * AudienceReport Class Doc Comment
 *
 * @category Class
 * @description custom_audience_report人群报表结构
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AudienceReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'audience_report';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'audienceId' => 'int',
        'accountId' => 'int',
        'adgroupId' => 'int',
        'campaignId' => 'int',
        'wechatAdgroupId' => 'int',
        'wechatCampaignId' => 'int',
        'modelId' => 'int',
        'audiencePredictTaskId' => 'int',
        'actionType' => '\TencentAds\Model\AdActionType',
        'cost' => 'int',
        'actionCount' => 'int',
        'userCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'audienceId' => 'int64',
        'accountId' => 'int64',
        'adgroupId' => 'int64',
        'campaignId' => 'int64',
        'wechatAdgroupId' => 'int64',
        'wechatCampaignId' => 'int64',
        'modelId' => 'int64',
        'audiencePredictTaskId' => 'int64',
        'actionType' => null,
        'cost' => 'int64',
        'actionCount' => 'int64',
        'userCount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'audienceId' => 'audience_id',
        'accountId' => 'account_id',
        'adgroupId' => 'adgroup_id',
        'campaignId' => 'campaign_id',
        'wechatAdgroupId' => 'wechat_adgroup_id',
        'wechatCampaignId' => 'wechat_campaign_id',
        'modelId' => 'model_id',
        'audiencePredictTaskId' => 'audience_predict_task_id',
        'actionType' => 'action_type',
        'cost' => 'cost',
        'actionCount' => 'action_count',
        'userCount' => 'user_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'audienceId' => 'setAudienceId',
        'accountId' => 'setAccountId',
        'adgroupId' => 'setAdgroupId',
        'campaignId' => 'setCampaignId',
        'wechatAdgroupId' => 'setWechatAdgroupId',
        'wechatCampaignId' => 'setWechatCampaignId',
        'modelId' => 'setModelId',
        'audiencePredictTaskId' => 'setAudiencePredictTaskId',
        'actionType' => 'setActionType',
        'cost' => 'setCost',
        'actionCount' => 'setActionCount',
        'userCount' => 'setUserCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'audienceId' => 'getAudienceId',
        'accountId' => 'getAccountId',
        'adgroupId' => 'getAdgroupId',
        'campaignId' => 'getCampaignId',
        'wechatAdgroupId' => 'getWechatAdgroupId',
        'wechatCampaignId' => 'getWechatCampaignId',
        'modelId' => 'getModelId',
        'audiencePredictTaskId' => 'getAudiencePredictTaskId',
        'actionType' => 'getActionType',
        'cost' => 'getCost',
        'actionCount' => 'getActionCount',
        'userCount' => 'getUserCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['audienceId'] = isset($data['audienceId']) ? $data['audienceId'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['adgroupId'] = isset($data['adgroupId']) ? $data['adgroupId'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['wechatAdgroupId'] = isset($data['wechatAdgroupId']) ? $data['wechatAdgroupId'] : null;
        $this->container['wechatCampaignId'] = isset($data['wechatCampaignId']) ? $data['wechatCampaignId'] : null;
        $this->container['modelId'] = isset($data['modelId']) ? $data['modelId'] : null;
        $this->container['audiencePredictTaskId'] = isset($data['audiencePredictTaskId']) ? $data['audiencePredictTaskId'] : null;
        $this->container['actionType'] = isset($data['actionType']) ? $data['actionType'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['actionCount'] = isset($data['actionCount']) ? $data['actionCount'] : null;
        $this->container['userCount'] = isset($data['userCount']) ? $data['userCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets audienceId
     *
     * @return int
     */
    public function getAudienceId()
    {
        return $this->container['audienceId'];
    }

    /**
     * Sets audienceId
     *
     * @param int $audienceId audienceId
     *
     * @return $this
     */
    public function setAudienceId($audienceId)
    {
        $this->container['audienceId'] = $audienceId;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param int $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets adgroupId
     *
     * @return int
     */
    public function getAdgroupId()
    {
        return $this->container['adgroupId'];
    }

    /**
     * Sets adgroupId
     *
     * @param int $adgroupId adgroupId
     *
     * @return $this
     */
    public function setAdgroupId($adgroupId)
    {
        $this->container['adgroupId'] = $adgroupId;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return int
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param int $campaignId campaignId
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets wechatAdgroupId
     *
     * @return int
     */
    public function getWechatAdgroupId()
    {
        return $this->container['wechatAdgroupId'];
    }

    /**
     * Sets wechatAdgroupId
     *
     * @param int $wechatAdgroupId wechatAdgroupId
     *
     * @return $this
     */
    public function setWechatAdgroupId($wechatAdgroupId)
    {
        $this->container['wechatAdgroupId'] = $wechatAdgroupId;

        return $this;
    }

    /**
     * Gets wechatCampaignId
     *
     * @return int
     */
    public function getWechatCampaignId()
    {
        return $this->container['wechatCampaignId'];
    }

    /**
     * Sets wechatCampaignId
     *
     * @param int $wechatCampaignId wechatCampaignId
     *
     * @return $this
     */
    public function setWechatCampaignId($wechatCampaignId)
    {
        $this->container['wechatCampaignId'] = $wechatCampaignId;

        return $this;
    }

    /**
     * Gets modelId
     *
     * @return int
     */
    public function getModelId()
    {
        return $this->container['modelId'];
    }

    /**
     * Sets modelId
     *
     * @param int $modelId modelId
     *
     * @return $this
     */
    public function setModelId($modelId)
    {
        $this->container['modelId'] = $modelId;

        return $this;
    }

    /**
     * Gets audiencePredictTaskId
     *
     * @return int
     */
    public function getAudiencePredictTaskId()
    {
        return $this->container['audiencePredictTaskId'];
    }

    /**
     * Sets audiencePredictTaskId
     *
     * @param int $audiencePredictTaskId audiencePredictTaskId
     *
     * @return $this
     */
    public function setAudiencePredictTaskId($audiencePredictTaskId)
    {
        $this->container['audiencePredictTaskId'] = $audiencePredictTaskId;

        return $this;
    }

    /**
     * Gets actionType
     *
     * @return \TencentAds\Model\AdActionType
     */
    public function getActionType()
    {
        return $this->container['actionType'];
    }

    /**
     * Sets actionType
     *
     * @param \TencentAds\Model\AdActionType $actionType actionType
     *
     * @return $this
     */
    public function setActionType($actionType)
    {
        $this->container['actionType'] = $actionType;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return int
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param int $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets actionCount
     *
     * @return int
     */
    public function getActionCount()
    {
        return $this->container['actionCount'];
    }

    /**
     * Sets actionCount
     *
     * @param int $actionCount actionCount
     *
     * @return $this
     */
    public function setActionCount($actionCount)
    {
        $this->container['actionCount'] = $actionCount;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount userCount
     *
     * @return $this
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


