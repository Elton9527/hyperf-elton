<?php
/**
 * UnsupportBillingSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * UnsupportBillingSpec Class Doc Comment
 *
 * @category Class
 * @description 支持的计费信息
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnsupportBillingSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'unsupport_billing_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'siteSet' => 'string[]',
        'billingEvent' => '\TencentAds\Model\BillingEvent',
        'minPrice' => 'int',
        'maxPrice' => 'int',
        'unsupportType' => '\TencentAds\Model\UnsupportType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'siteSet' => null,
        'billingEvent' => null,
        'minPrice' => 'int64',
        'maxPrice' => 'int64',
        'unsupportType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'siteSet' => 'site_set',
        'billingEvent' => 'billing_event',
        'minPrice' => 'min_price',
        'maxPrice' => 'max_price',
        'unsupportType' => 'unsupport_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'siteSet' => 'setSiteSet',
        'billingEvent' => 'setBillingEvent',
        'minPrice' => 'setMinPrice',
        'maxPrice' => 'setMaxPrice',
        'unsupportType' => 'setUnsupportType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'siteSet' => 'getSiteSet',
        'billingEvent' => 'getBillingEvent',
        'minPrice' => 'getMinPrice',
        'maxPrice' => 'getMaxPrice',
        'unsupportType' => 'getUnsupportType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['siteSet'] = isset($data['siteSet']) ? $data['siteSet'] : null;
        $this->container['billingEvent'] = isset($data['billingEvent']) ? $data['billingEvent'] : null;
        $this->container['minPrice'] = isset($data['minPrice']) ? $data['minPrice'] : null;
        $this->container['maxPrice'] = isset($data['maxPrice']) ? $data['maxPrice'] : null;
        $this->container['unsupportType'] = isset($data['unsupportType']) ? $data['unsupportType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets siteSet
     *
     * @return string[]
     */
    public function getSiteSet()
    {
        return $this->container['siteSet'];
    }

    /**
     * Sets siteSet
     *
     * @param string[] $siteSet siteSet
     *
     * @return $this
     */
    public function setSiteSet($siteSet)
    {
        $this->container['siteSet'] = $siteSet;

        return $this;
    }

    /**
     * Gets billingEvent
     *
     * @return \TencentAds\Model\BillingEvent
     */
    public function getBillingEvent()
    {
        return $this->container['billingEvent'];
    }

    /**
     * Sets billingEvent
     *
     * @param \TencentAds\Model\BillingEvent $billingEvent billingEvent
     *
     * @return $this
     */
    public function setBillingEvent($billingEvent)
    {
        $this->container['billingEvent'] = $billingEvent;

        return $this;
    }

    /**
     * Gets minPrice
     *
     * @return int
     */
    public function getMinPrice()
    {
        return $this->container['minPrice'];
    }

    /**
     * Sets minPrice
     *
     * @param int $minPrice minPrice
     *
     * @return $this
     */
    public function setMinPrice($minPrice)
    {
        $this->container['minPrice'] = $minPrice;

        return $this;
    }

    /**
     * Gets maxPrice
     *
     * @return int
     */
    public function getMaxPrice()
    {
        return $this->container['maxPrice'];
    }

    /**
     * Sets maxPrice
     *
     * @param int $maxPrice maxPrice
     *
     * @return $this
     */
    public function setMaxPrice($maxPrice)
    {
        $this->container['maxPrice'] = $maxPrice;

        return $this;
    }

    /**
     * Gets unsupportType
     *
     * @return \TencentAds\Model\UnsupportType
     */
    public function getUnsupportType()
    {
        return $this->container['unsupportType'];
    }

    /**
     * Sets unsupportType
     *
     * @param \TencentAds\Model\UnsupportType $unsupportType unsupportType
     *
     * @return $this
     */
    public function setUnsupportType($unsupportType)
    {
        $this->container['unsupportType'] = $unsupportType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


