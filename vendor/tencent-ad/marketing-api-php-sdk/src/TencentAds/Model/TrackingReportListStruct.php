<?php
/**
 * TrackingReportListStruct
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * TrackingReportListStruct Class Doc Comment
 *
 * @category Class
 * @description 点击追踪报表结构体
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrackingReportListStruct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'tracking_report_list_struct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => 'string',
        'hour' => 'int',
        'rawClicks' => 'int',
        '_1minClicks' => 'int',
        '_2minClicks' => 'int',
        '_15minClicks' => 'int',
        'requestFail' => 'int',
        'responseFail' => 'int',
        'httpStatusError' => 'int',
        'otherError' => 'int',
        'sourceType' => '\TencentAds\Model\SourceType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => null,
        'hour' => 'int64',
        'rawClicks' => 'int64',
        '_1minClicks' => 'int64',
        '_2minClicks' => 'int64',
        '_15minClicks' => 'int64',
        'requestFail' => 'int64',
        'responseFail' => 'int64',
        'httpStatusError' => 'int64',
        'otherError' => 'int64',
        'sourceType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
        'hour' => 'hour',
        'rawClicks' => 'raw_clicks',
        '_1minClicks' => '1min_clicks',
        '_2minClicks' => '2min_clicks',
        '_15minClicks' => '15min_clicks',
        'requestFail' => 'request_fail',
        'responseFail' => 'response_fail',
        'httpStatusError' => 'http_status_error',
        'otherError' => 'other_error',
        'sourceType' => 'source_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
        'hour' => 'setHour',
        'rawClicks' => 'setRawClicks',
        '_1minClicks' => 'set1minClicks',
        '_2minClicks' => 'set2minClicks',
        '_15minClicks' => 'set15minClicks',
        'requestFail' => 'setRequestFail',
        'responseFail' => 'setResponseFail',
        'httpStatusError' => 'setHttpStatusError',
        'otherError' => 'setOtherError',
        'sourceType' => 'setSourceType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
        'hour' => 'getHour',
        'rawClicks' => 'getRawClicks',
        '_1minClicks' => 'get1minClicks',
        '_2minClicks' => 'get2minClicks',
        '_15minClicks' => 'get15minClicks',
        'requestFail' => 'getRequestFail',
        'responseFail' => 'getResponseFail',
        'httpStatusError' => 'getHttpStatusError',
        'otherError' => 'getOtherError',
        'sourceType' => 'getSourceType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['hour'] = isset($data['hour']) ? $data['hour'] : null;
        $this->container['rawClicks'] = isset($data['rawClicks']) ? $data['rawClicks'] : null;
        $this->container['_1minClicks'] = isset($data['_1minClicks']) ? $data['_1minClicks'] : null;
        $this->container['_2minClicks'] = isset($data['_2minClicks']) ? $data['_2minClicks'] : null;
        $this->container['_15minClicks'] = isset($data['_15minClicks']) ? $data['_15minClicks'] : null;
        $this->container['requestFail'] = isset($data['requestFail']) ? $data['requestFail'] : null;
        $this->container['responseFail'] = isset($data['responseFail']) ? $data['responseFail'] : null;
        $this->container['httpStatusError'] = isset($data['httpStatusError']) ? $data['httpStatusError'] : null;
        $this->container['otherError'] = isset($data['otherError']) ? $data['otherError'] : null;
        $this->container['sourceType'] = isset($data['sourceType']) ? $data['sourceType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets hour
     *
     * @return int
     */
    public function getHour()
    {
        return $this->container['hour'];
    }

    /**
     * Sets hour
     *
     * @param int $hour hour
     *
     * @return $this
     */
    public function setHour($hour)
    {
        $this->container['hour'] = $hour;

        return $this;
    }

    /**
     * Gets rawClicks
     *
     * @return int
     */
    public function getRawClicks()
    {
        return $this->container['rawClicks'];
    }

    /**
     * Sets rawClicks
     *
     * @param int $rawClicks rawClicks
     *
     * @return $this
     */
    public function setRawClicks($rawClicks)
    {
        $this->container['rawClicks'] = $rawClicks;

        return $this;
    }

    /**
     * Gets _1minClicks
     *
     * @return int
     */
    public function get1minClicks()
    {
        return $this->container['_1minClicks'];
    }

    /**
     * Sets _1minClicks
     *
     * @param int $_1minClicks _1minClicks
     *
     * @return $this
     */
    public function set1minClicks($_1minClicks)
    {
        $this->container['_1minClicks'] = $_1minClicks;

        return $this;
    }

    /**
     * Gets _2minClicks
     *
     * @return int
     */
    public function get2minClicks()
    {
        return $this->container['_2minClicks'];
    }

    /**
     * Sets _2minClicks
     *
     * @param int $_2minClicks _2minClicks
     *
     * @return $this
     */
    public function set2minClicks($_2minClicks)
    {
        $this->container['_2minClicks'] = $_2minClicks;

        return $this;
    }

    /**
     * Gets _15minClicks
     *
     * @return int
     */
    public function get15minClicks()
    {
        return $this->container['_15minClicks'];
    }

    /**
     * Sets _15minClicks
     *
     * @param int $_15minClicks _15minClicks
     *
     * @return $this
     */
    public function set15minClicks($_15minClicks)
    {
        $this->container['_15minClicks'] = $_15minClicks;

        return $this;
    }

    /**
     * Gets requestFail
     *
     * @return int
     */
    public function getRequestFail()
    {
        return $this->container['requestFail'];
    }

    /**
     * Sets requestFail
     *
     * @param int $requestFail requestFail
     *
     * @return $this
     */
    public function setRequestFail($requestFail)
    {
        $this->container['requestFail'] = $requestFail;

        return $this;
    }

    /**
     * Gets responseFail
     *
     * @return int
     */
    public function getResponseFail()
    {
        return $this->container['responseFail'];
    }

    /**
     * Sets responseFail
     *
     * @param int $responseFail responseFail
     *
     * @return $this
     */
    public function setResponseFail($responseFail)
    {
        $this->container['responseFail'] = $responseFail;

        return $this;
    }

    /**
     * Gets httpStatusError
     *
     * @return int
     */
    public function getHttpStatusError()
    {
        return $this->container['httpStatusError'];
    }

    /**
     * Sets httpStatusError
     *
     * @param int $httpStatusError httpStatusError
     *
     * @return $this
     */
    public function setHttpStatusError($httpStatusError)
    {
        $this->container['httpStatusError'] = $httpStatusError;

        return $this;
    }

    /**
     * Gets otherError
     *
     * @return int
     */
    public function getOtherError()
    {
        return $this->container['otherError'];
    }

    /**
     * Sets otherError
     *
     * @param int $otherError otherError
     *
     * @return $this
     */
    public function setOtherError($otherError)
    {
        $this->container['otherError'] = $otherError;

        return $this;
    }

    /**
     * Gets sourceType
     *
     * @return \TencentAds\Model\SourceType
     */
    public function getSourceType()
    {
        return $this->container['sourceType'];
    }

    /**
     * Sets sourceType
     *
     * @param \TencentAds\Model\SourceType $sourceType sourceType
     *
     * @return $this
     */
    public function setSourceType($sourceType)
    {
        $this->container['sourceType'] = $sourceType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


