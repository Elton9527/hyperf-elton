<?php
/**
 * ActionsUserId
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * ActionsUserId Class Doc Comment
 *
 * @category Class
 * @description 用户标识，app数据上报时必填，web数据上报时可以不填user_id，但建议填写，方便后续优化
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionsUserId implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'actions_user_id';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hashImei' => 'string',
        'hashIdfa' => 'string',
        'gdtOpenid' => 'string',
        'hashPhone' => 'string',
        'qaid' => 'string',
        'hashAndroidId' => 'string',
        'hashMac' => 'string',
        'oaid' => 'string',
        'wechatOpenid' => 'string',
        'wechatUnionid' => 'string',
        'wechatAppId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hashImei' => null,
        'hashIdfa' => null,
        'gdtOpenid' => null,
        'hashPhone' => null,
        'qaid' => null,
        'hashAndroidId' => null,
        'hashMac' => null,
        'oaid' => null,
        'wechatOpenid' => null,
        'wechatUnionid' => null,
        'wechatAppId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hashImei' => 'hash_imei',
        'hashIdfa' => 'hash_idfa',
        'gdtOpenid' => 'gdt_openid',
        'hashPhone' => 'hash_phone',
        'qaid' => 'qaid',
        'hashAndroidId' => 'hash_android_id',
        'hashMac' => 'hash_mac',
        'oaid' => 'oaid',
        'wechatOpenid' => 'wechat_openid',
        'wechatUnionid' => 'wechat_unionid',
        'wechatAppId' => 'wechat_app_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hashImei' => 'setHashImei',
        'hashIdfa' => 'setHashIdfa',
        'gdtOpenid' => 'setGdtOpenid',
        'hashPhone' => 'setHashPhone',
        'qaid' => 'setQaid',
        'hashAndroidId' => 'setHashAndroidId',
        'hashMac' => 'setHashMac',
        'oaid' => 'setOaid',
        'wechatOpenid' => 'setWechatOpenid',
        'wechatUnionid' => 'setWechatUnionid',
        'wechatAppId' => 'setWechatAppId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hashImei' => 'getHashImei',
        'hashIdfa' => 'getHashIdfa',
        'gdtOpenid' => 'getGdtOpenid',
        'hashPhone' => 'getHashPhone',
        'qaid' => 'getQaid',
        'hashAndroidId' => 'getHashAndroidId',
        'hashMac' => 'getHashMac',
        'oaid' => 'getOaid',
        'wechatOpenid' => 'getWechatOpenid',
        'wechatUnionid' => 'getWechatUnionid',
        'wechatAppId' => 'getWechatAppId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hashImei'] = isset($data['hashImei']) ? $data['hashImei'] : null;
        $this->container['hashIdfa'] = isset($data['hashIdfa']) ? $data['hashIdfa'] : null;
        $this->container['gdtOpenid'] = isset($data['gdtOpenid']) ? $data['gdtOpenid'] : null;
        $this->container['hashPhone'] = isset($data['hashPhone']) ? $data['hashPhone'] : null;
        $this->container['qaid'] = isset($data['qaid']) ? $data['qaid'] : null;
        $this->container['hashAndroidId'] = isset($data['hashAndroidId']) ? $data['hashAndroidId'] : null;
        $this->container['hashMac'] = isset($data['hashMac']) ? $data['hashMac'] : null;
        $this->container['oaid'] = isset($data['oaid']) ? $data['oaid'] : null;
        $this->container['wechatOpenid'] = isset($data['wechatOpenid']) ? $data['wechatOpenid'] : null;
        $this->container['wechatUnionid'] = isset($data['wechatUnionid']) ? $data['wechatUnionid'] : null;
        $this->container['wechatAppId'] = isset($data['wechatAppId']) ? $data['wechatAppId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hashImei
     *
     * @return string
     */
    public function getHashImei()
    {
        return $this->container['hashImei'];
    }

    /**
     * Sets hashImei
     *
     * @param string $hashImei hashImei
     *
     * @return $this
     */
    public function setHashImei($hashImei)
    {
        $this->container['hashImei'] = $hashImei;

        return $this;
    }

    /**
     * Gets hashIdfa
     *
     * @return string
     */
    public function getHashIdfa()
    {
        return $this->container['hashIdfa'];
    }

    /**
     * Sets hashIdfa
     *
     * @param string $hashIdfa hashIdfa
     *
     * @return $this
     */
    public function setHashIdfa($hashIdfa)
    {
        $this->container['hashIdfa'] = $hashIdfa;

        return $this;
    }

    /**
     * Gets gdtOpenid
     *
     * @return string
     */
    public function getGdtOpenid()
    {
        return $this->container['gdtOpenid'];
    }

    /**
     * Sets gdtOpenid
     *
     * @param string $gdtOpenid gdtOpenid
     *
     * @return $this
     */
    public function setGdtOpenid($gdtOpenid)
    {
        $this->container['gdtOpenid'] = $gdtOpenid;

        return $this;
    }

    /**
     * Gets hashPhone
     *
     * @return string
     */
    public function getHashPhone()
    {
        return $this->container['hashPhone'];
    }

    /**
     * Sets hashPhone
     *
     * @param string $hashPhone hashPhone
     *
     * @return $this
     */
    public function setHashPhone($hashPhone)
    {
        $this->container['hashPhone'] = $hashPhone;

        return $this;
    }

    /**
     * Gets qaid
     *
     * @return string
     */
    public function getQaid()
    {
        return $this->container['qaid'];
    }

    /**
     * Sets qaid
     *
     * @param string $qaid qaid
     *
     * @return $this
     */
    public function setQaid($qaid)
    {
        $this->container['qaid'] = $qaid;

        return $this;
    }

    /**
     * Gets hashAndroidId
     *
     * @return string
     */
    public function getHashAndroidId()
    {
        return $this->container['hashAndroidId'];
    }

    /**
     * Sets hashAndroidId
     *
     * @param string $hashAndroidId hashAndroidId
     *
     * @return $this
     */
    public function setHashAndroidId($hashAndroidId)
    {
        $this->container['hashAndroidId'] = $hashAndroidId;

        return $this;
    }

    /**
     * Gets hashMac
     *
     * @return string
     */
    public function getHashMac()
    {
        return $this->container['hashMac'];
    }

    /**
     * Sets hashMac
     *
     * @param string $hashMac hashMac
     *
     * @return $this
     */
    public function setHashMac($hashMac)
    {
        $this->container['hashMac'] = $hashMac;

        return $this;
    }

    /**
     * Gets oaid
     *
     * @return string
     */
    public function getOaid()
    {
        return $this->container['oaid'];
    }

    /**
     * Sets oaid
     *
     * @param string $oaid oaid
     *
     * @return $this
     */
    public function setOaid($oaid)
    {
        $this->container['oaid'] = $oaid;

        return $this;
    }

    /**
     * Gets wechatOpenid
     *
     * @return string
     */
    public function getWechatOpenid()
    {
        return $this->container['wechatOpenid'];
    }

    /**
     * Sets wechatOpenid
     *
     * @param string $wechatOpenid wechatOpenid
     *
     * @return $this
     */
    public function setWechatOpenid($wechatOpenid)
    {
        $this->container['wechatOpenid'] = $wechatOpenid;

        return $this;
    }

    /**
     * Gets wechatUnionid
     *
     * @return string
     */
    public function getWechatUnionid()
    {
        return $this->container['wechatUnionid'];
    }

    /**
     * Sets wechatUnionid
     *
     * @param string $wechatUnionid wechatUnionid
     *
     * @return $this
     */
    public function setWechatUnionid($wechatUnionid)
    {
        $this->container['wechatUnionid'] = $wechatUnionid;

        return $this;
    }

    /**
     * Gets wechatAppId
     *
     * @return string
     */
    public function getWechatAppId()
    {
        return $this->container['wechatAppId'];
    }

    /**
     * Sets wechatAppId
     *
     * @param string $wechatAppId wechatAppId
     *
     * @return $this
     */
    public function setWechatAppId($wechatAppId)
    {
        $this->container['wechatAppId'] = $wechatAppId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


