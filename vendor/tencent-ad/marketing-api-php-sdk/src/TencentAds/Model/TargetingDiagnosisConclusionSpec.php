<?php
/**
 * TargetingDiagnosisConclusionSpec
 *
 * PHP version 5
 *
 * @category Class
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * Marketing API
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace TencentAds\Model;

use \ArrayAccess;
use \TencentAds\ObjectSerializer;

/**
 * TargetingDiagnosisConclusionSpec Class Doc Comment
 *
 * @category Class
 * @description 定向维度的曝光评估结果
 * @package  TencentAds
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TargetingDiagnosisConclusionSpec implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'targeting_diagnosis_conclusion_spec';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'targetingDiagnosisScore' => 'int',
        'contractOccupiedScore' => 'int',
        'contractOccupiedSpecList' => '\TencentAds\Model\ContractOccupiedSpec[]',
        'compititionScore' => 'int',
        'compititionSpecList' => '\TencentAds\Model\CompititionSpec[]',
        'conclusion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'targetingDiagnosisScore' => 'int64',
        'contractOccupiedScore' => 'int64',
        'contractOccupiedSpecList' => null,
        'compititionScore' => 'int64',
        'compititionSpecList' => null,
        'conclusion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'targetingDiagnosisScore' => 'targeting_diagnosis_score',
        'contractOccupiedScore' => 'contract_occupied_score',
        'contractOccupiedSpecList' => 'contract_occupied_spec_list',
        'compititionScore' => 'compitition_score',
        'compititionSpecList' => 'compitition_spec_list',
        'conclusion' => 'conclusion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'targetingDiagnosisScore' => 'setTargetingDiagnosisScore',
        'contractOccupiedScore' => 'setContractOccupiedScore',
        'contractOccupiedSpecList' => 'setContractOccupiedSpecList',
        'compititionScore' => 'setCompititionScore',
        'compititionSpecList' => 'setCompititionSpecList',
        'conclusion' => 'setConclusion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'targetingDiagnosisScore' => 'getTargetingDiagnosisScore',
        'contractOccupiedScore' => 'getContractOccupiedScore',
        'contractOccupiedSpecList' => 'getContractOccupiedSpecList',
        'compititionScore' => 'getCompititionScore',
        'compititionSpecList' => 'getCompititionSpecList',
        'conclusion' => 'getConclusion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['targetingDiagnosisScore'] = isset($data['targetingDiagnosisScore']) ? $data['targetingDiagnosisScore'] : null;
        $this->container['contractOccupiedScore'] = isset($data['contractOccupiedScore']) ? $data['contractOccupiedScore'] : null;
        $this->container['contractOccupiedSpecList'] = isset($data['contractOccupiedSpecList']) ? $data['contractOccupiedSpecList'] : null;
        $this->container['compititionScore'] = isset($data['compititionScore']) ? $data['compititionScore'] : null;
        $this->container['compititionSpecList'] = isset($data['compititionSpecList']) ? $data['compititionSpecList'] : null;
        $this->container['conclusion'] = isset($data['conclusion']) ? $data['conclusion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets targetingDiagnosisScore
     *
     * @return int
     */
    public function getTargetingDiagnosisScore()
    {
        return $this->container['targetingDiagnosisScore'];
    }

    /**
     * Sets targetingDiagnosisScore
     *
     * @param int $targetingDiagnosisScore targetingDiagnosisScore
     *
     * @return $this
     */
    public function setTargetingDiagnosisScore($targetingDiagnosisScore)
    {
        $this->container['targetingDiagnosisScore'] = $targetingDiagnosisScore;

        return $this;
    }

    /**
     * Gets contractOccupiedScore
     *
     * @return int
     */
    public function getContractOccupiedScore()
    {
        return $this->container['contractOccupiedScore'];
    }

    /**
     * Sets contractOccupiedScore
     *
     * @param int $contractOccupiedScore contractOccupiedScore
     *
     * @return $this
     */
    public function setContractOccupiedScore($contractOccupiedScore)
    {
        $this->container['contractOccupiedScore'] = $contractOccupiedScore;

        return $this;
    }

    /**
     * Gets contractOccupiedSpecList
     *
     * @return \TencentAds\Model\ContractOccupiedSpec[]
     */
    public function getContractOccupiedSpecList()
    {
        return $this->container['contractOccupiedSpecList'];
    }

    /**
     * Sets contractOccupiedSpecList
     *
     * @param \TencentAds\Model\ContractOccupiedSpec[] $contractOccupiedSpecList contractOccupiedSpecList
     *
     * @return $this
     */
    public function setContractOccupiedSpecList($contractOccupiedSpecList)
    {
        $this->container['contractOccupiedSpecList'] = $contractOccupiedSpecList;

        return $this;
    }

    /**
     * Gets compititionScore
     *
     * @return int
     */
    public function getCompititionScore()
    {
        return $this->container['compititionScore'];
    }

    /**
     * Sets compititionScore
     *
     * @param int $compititionScore compititionScore
     *
     * @return $this
     */
    public function setCompititionScore($compititionScore)
    {
        $this->container['compititionScore'] = $compititionScore;

        return $this;
    }

    /**
     * Gets compititionSpecList
     *
     * @return \TencentAds\Model\CompititionSpec[]
     */
    public function getCompititionSpecList()
    {
        return $this->container['compititionSpecList'];
    }

    /**
     * Sets compititionSpecList
     *
     * @param \TencentAds\Model\CompititionSpec[] $compititionSpecList compititionSpecList
     *
     * @return $this
     */
    public function setCompititionSpecList($compititionSpecList)
    {
        $this->container['compititionSpecList'] = $compititionSpecList;

        return $this;
    }

    /**
     * Gets conclusion
     *
     * @return string
     */
    public function getConclusion()
    {
        return $this->container['conclusion'];
    }

    /**
     * Sets conclusion
     *
     * @param string $conclusion conclusion
     *
     * @return $this
     */
    public function setConclusion($conclusion)
    {
        $this->container['conclusion'] = $conclusion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


